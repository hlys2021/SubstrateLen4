{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../bak_node_modules/@ethersproject/logger/src.ts/index.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\n\nconst LogLevels: { [ name: string ]: number } = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\n\nimport { version } from \"./_version\";\n\nlet _globalLogger: Logger = null;\n\nfunction _checkNormalize(): string {\n    try {\n        const missing: Array<string> = [ ];\n\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                };\n            } catch(error) {\n                missing.push(form);\n            }\n        });\n\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\")\n        }\n    } catch (error) {\n        return error.message;\n    }\n\n    return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport enum LogLevel {\n    DEBUG    = \"DEBUG\",\n    INFO     = \"INFO\",\n    WARNING  = \"WARNING\",\n    ERROR    = \"ERROR\",\n    OFF      = \"OFF\"\n}\n\n\nexport enum ErrorCode {\n\n    ///////////////////\n    // Generic Errors\n\n    // Unknown Error\n    UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n\n    // Not Implemented\n    NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\n\n    // Unsupported Operation\n    //   - operation\n    UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\n\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n\n    // Some sort of bad response from the server\n    SERVER_ERROR = \"SERVER_ERROR\",\n\n    // Timeout\n    TIMEOUT = \"TIMEOUT\",\n\n    ///////////////////\n    // Operational  Errors\n\n    // Buffer Overrun\n    BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\n\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    NUMERIC_FAULT = \"NUMERIC_FAULT\",\n\n\n    ///////////////////\n    // Argument Errors\n\n    // Missing new operator to an object\n    //  - name: The name of the class\n    MISSING_NEW = \"MISSING_NEW\",\n\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\n\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\n\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\n\n\n    ///////////////////\n    // Blockchain Errors\n\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    CALL_EXCEPTION = \"CALL_EXCEPTION\",\n\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\n\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    NONCE_EXPIRED = \"NONCE_EXPIRED\",\n\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\",\n\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\",\n\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\",\n\n\n    ///////////////////\n    // Interaction Errors\n\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ACTION_REJECTED = \"ACTION_REJECTED\",\n};\n\nconst HEX = \"0123456789abcdef\";\n\nexport class Logger {\n    readonly version: string;\n\n    static errors = ErrorCode;\n\n    static levels = LogLevel;\n\n    constructor(version: string) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n\n    _log(logLevel: LogLevel, args: Array<any>): void {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) { return; }\n        console.log.apply(console, args);\n    }\n\n    debug(...args: Array<any>): void {\n        this._log(Logger.levels.DEBUG, args);\n    }\n\n    info(...args: Array<any>): void {\n        this._log(Logger.levels.INFO, args);\n    }\n\n    warn(...args: Array<any>): void {\n        this._log(Logger.levels.WARNING, args);\n    }\n\n    makeError(message: string, code?: ErrorCode, params?: any): Error {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, { });\n        }\n\n        if (!code) { code = Logger.errors.UNKNOWN_ERROR; }\n        if (!params) { params = {}; }\n\n        const messageDetails: Array<string> = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                      hex += HEX[value[i] >> 4];\n                      hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                } else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${ code }`);\n        messageDetails.push(`version=${ this.version }`);\n\n        const reason = message;\n\n        let url = \"\";\n\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n\n                switch (fault) {\n                    case \"overflow\": case \"underflow\": case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\": case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n\n        // @TODO: Any??\n        const error: any = new Error(message);\n        error.reason = reason;\n        error.code = code\n\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n\n        return error;\n    }\n\n    throwError(message: string, code?: ErrorCode, params?: any): never {\n        throw this.makeError(message, code, params);\n    }\n\n    throwArgumentError(message: string, name: string, value: any): never {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n\n    assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\n        if (!!condition) { return; }\n        this.throwError(message, code, params);\n    }\n\n    assertArgument(condition: any, message: string, name: string, value: any): void {\n        if (!!condition) { return; }\n        this.throwArgumentError(message, name, value);\n    }\n\n    checkNormalize(message?: string): void {\n        if (message == null) { message = \"platform missing String.prototype.normalize\"; }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n\n    checkSafeUint53(value: number, message?: string): void {\n        if (typeof(value) !== \"number\") { return; }\n\n        if (message == null) { message = \"value not safe\"; }\n\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n\n    checkArgumentCount(count: number, expectedCount: number, message?: string): void {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n\n    checkNew(target: any, kind: any): void {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    checkAbstract(target: any, kind: any): void {\n        if (target === kind) {\n            this.throwError(\n                \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { name: target.name, operation: \"new\" }\n            );\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    static globalLogger(): Logger {\n        if (!_globalLogger) { _globalLogger = new Logger(version); }\n        return _globalLogger;\n    }\n\n    static setCensorship(censorship: boolean, permanent?: boolean): void {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        if (_permanentCensorErrors) {\n            if (!censorship) { return; }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n\n    static setLogLevel(logLevel: LogLevel): void {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n\n    static from(version: string): Logger {\n        return new Logger(version);\n    }\n}\n"]}