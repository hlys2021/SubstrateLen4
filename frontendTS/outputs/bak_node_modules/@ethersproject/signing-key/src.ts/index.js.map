{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../bak_node_modules/@ethersproject/signing-key/src.ts/index.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n\nimport { EC } from \"./elliptic\";\n\nimport { arrayify, BytesLike, hexDataLength, hexlify, hexZeroPad, Signature, SignatureLike, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nlet _curve: EC = null\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new EC(\"secp256k1\");\n    }\n    return _curve;\n}\n\nexport class SigningKey {\n\n    readonly curve: string;\n\n    readonly privateKey: string;\n    readonly publicKey: string;\n    readonly compressedPublicKey: string;\n\n    //readonly address: string;\n\n    readonly _isSigningKey: boolean;\n\n    constructor(privateKey: BytesLike) {\n        defineReadOnly(this, \"curve\", \"secp256k1\");\n\n        defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n        if (hexDataLength(this.privateKey) !== 32) {\n            logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        }\n\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n\n        defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n\n        defineReadOnly(this, \"_isSigningKey\", true);\n    }\n\n    _addPoint(other: BytesLike): string {\n        const p0 =  getCurve().keyFromPublic(arrayify(this.publicKey));\n        const p1 =  getCurve().keyFromPublic(arrayify(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n\n    signDigest(digest: BytesLike): Signature {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const digestBytes = arrayify(digest);\n        if (digestBytes.length !== 32) {\n            logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n        }\n        const signature = keyPair.sign(digestBytes, { canonical: true });\n        return splitSignature({\n            recoveryParam: signature.recoveryParam,\n            r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n            s: hexZeroPad(\"0x\" + signature.s.toString(16), 32),\n        })\n    }\n\n    computeSharedSecret(otherKey: BytesLike): string {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n        return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n\n    static isSigningKey(value: any): value is SigningKey {\n        return !!(value && value._isSigningKey);\n    }\n}\n\nexport function recoverPublicKey(digest: BytesLike, signature: SignatureLike): string {\n    const sig = splitSignature(signature);\n    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };\n    return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\n\nexport function computePublicKey(key: BytesLike, compressed?: boolean): string {\n    const bytes = arrayify(key);\n\n    if (bytes.length === 32) {\n        const signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n\n    } else if (bytes.length === 33) {\n        if (compressed) { return hexlify(bytes); }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n\n    } else if (bytes.length === 65) {\n        if (!compressed) { return hexlify(bytes); }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\n\n"]}