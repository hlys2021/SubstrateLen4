{"version":3,"file":"scrypt.js","sourceRoot":"","sources":["../../../../bak_node_modules/ethereum-cryptography/src/scrypt.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6CAA2C;AAC3C,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;AAEtC,SAAsB,MAAM,CAC1B,QAAgB,EAChB,IAAY,EACZ,CAAS,EACT,CAAS,EACT,CAAS,EACT,KAAa;;QAEb,OAAO,MAAM,CAAC,IAAI,CAAC,MAAM,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;IAC5E,CAAC;CAAA;AATD,wBASC;AAED,SAAgB,UAAU,CACxB,QAAgB,EAChB,IAAY,EACZ,CAAS,EACT,CAAS,EACT,CAAS,EACT,KAAa;IAEb,OAAO,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;AAC1E,CAAC;AATD,gCASC","sourcesContent":["import \"scrypt-js/thirdparty/setImmediate\";\nconst scryptJs = require(\"scrypt-js\");\n\nexport async function scrypt(\n  password: Buffer,\n  salt: Buffer,\n  n: number,\n  p: number,\n  r: number,\n  dklen: number\n): Promise<Buffer> {\n  return Buffer.from(await scryptJs.scrypt(password, salt, n, r, p, dklen));\n}\n\nexport function scryptSync(\n  password: Buffer,\n  salt: Buffer,\n  n: number,\n  p: number,\n  r: number,\n  dklen: number\n): Buffer {\n  return Buffer.from(scryptJs.syncScrypt(password, salt, n, r, p, dklen));\n}\n"]}