{"version":3,"file":"secp256k1.js","sourceRoot":"","sources":["../../../../bak_node_modules/ethereum-cryptography/src/secp256k1.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA6C;AAC7C,qCAA8D;AAE9D,MAAM,0BAA0B,GAAG,EAAE,CAAC;AAEtC,SAAsB,gBAAgB;;QACpC,OAAO,IAAI,EAAE;YACX,MAAM,EAAE,GAAG,MAAM,IAAA,uBAAc,EAAC,0BAA0B,CAAC,CAAC;YAC5D,IAAI,IAAA,4BAAgB,EAAC,EAAE,CAAC,EAAE;gBACxB,OAAO,EAAE,CAAC;aACX;SACF;IACH,CAAC;CAAA;AAPD,4CAOC;AAED,SAAgB,oBAAoB;IAClC,OAAO,IAAI,EAAE;QACX,MAAM,EAAE,GAAG,IAAA,2BAAkB,EAAC,0BAA0B,CAAC,CAAC;QAC1D,IAAI,IAAA,4BAAgB,EAAC,EAAE,CAAC,EAAE;YACxB,OAAO,EAAE,CAAC;SACX;KACF;AACH,CAAC;AAPD,oDAOC;AAED,4CAA0B","sourcesContent":["import { privateKeyVerify } from \"secp256k1\";\nimport { getRandomBytes, getRandomBytesSync } from \"./random\";\n\nconst SECP256K1_PRIVATE_KEY_SIZE = 32;\n\nexport async function createPrivateKey(): Promise<Uint8Array> {\n  while (true) {\n    const pk = await getRandomBytes(SECP256K1_PRIVATE_KEY_SIZE);\n    if (privateKeyVerify(pk)) {\n      return pk;\n    }\n  }\n}\n\nexport function createPrivateKeySync(): Uint8Array {\n  while (true) {\n    const pk = getRandomBytesSync(SECP256K1_PRIVATE_KEY_SIZE);\n    if (privateKeyVerify(pk)) {\n      return pk;\n    }\n  }\n}\n\nexport * from \"secp256k1\";\n"]}