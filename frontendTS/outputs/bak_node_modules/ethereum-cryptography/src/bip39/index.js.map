{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../bak_node_modules/ethereum-cryptography/src/bip39/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,MAAM,KAAK,GAAG,OAAO,CAAC,mCAAmC,CAAC,CAAC;AAE3D,SAAgB,gBAAgB,CAC9B,QAAkB,EAClB,WAAmB,GAAG;IAEtB,OAAO,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;AAC/D,CAAC;AALD,4CAKC;AAED,SAAgB,iBAAiB,CAC/B,QAAgB,EAChB,QAAkB;IAElB,OAAO,KAAK,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACrD,CAAC;AALD,8CAKC;AAED,SAAgB,iBAAiB,CAAC,OAAe,EAAE,QAAkB;IACnE,OAAO,KAAK,CAAC,iBAAiB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AACpD,CAAC;AAFD,8CAEC;AAED,SAAgB,gBAAgB,CAC9B,QAAgB,EAChB,QAAkB;IAElB,OAAO,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACpD,CAAC;AALD,4CAKC;AAED,SAAsB,cAAc,CAClC,QAAgB,EAChB,aAAqB,EAAE;;QAEvB,OAAO,KAAK,CAAC,cAAc,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACpD,CAAC;CAAA;AALD,wCAKC;AAED,SAAgB,kBAAkB,CAChC,QAAgB,EAChB,aAAqB,EAAE;IAEvB,OAAO,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AACxD,CAAC;AALD,gDAKC","sourcesContent":["const bip39 = require(\"../vendor/bip39-without-wordlists\");\n\nexport function generateMnemonic(\n  wordlist: string[],\n  strength: number = 128\n): string {\n  return bip39.generateMnemonic(strength, undefined, wordlist);\n}\n\nexport function mnemonicToEntropy(\n  mnemonic: string,\n  wordlist: string[]\n): Buffer {\n  return bip39.mnemonicToEntropy(mnemonic, wordlist);\n}\n\nexport function entropyToMnemonic(entropy: Buffer, wordlist: string[]): string {\n  return bip39.entropyToMnemonic(entropy, wordlist);\n}\n\nexport function validateMnemonic(\n  mnemonic: string,\n  wordlist: string[]\n): boolean {\n  return bip39.validateMnemonic(mnemonic, wordlist);\n}\n\nexport async function mnemonicToSeed(\n  mnemonic: string,\n  passphrase: string = \"\"\n): Promise<Buffer> {\n  return bip39.mnemonicToSeed(mnemonic, passphrase);\n}\n\nexport function mnemonicToSeedSync(\n  mnemonic: string,\n  passphrase: string = \"\"\n): Buffer {\n  return bip39.mnemonicToSeedSync(mnemonic, passphrase);\n}\n"]}