{"version":3,"file":"hdkey.js","sourceRoot":"","sources":["../../../../../bak_node_modules/ethereum-cryptography/src/pure/hdkey.ts"],"names":[],"mappings":";;;AAiCA,MAAM,KAAK,GAAkB,OAAO,CAAC,+BAA+B,CAAC,CAAC;AAEzD,QAAA,KAAK,GAAG,KAAK,CAAC","sourcesContent":["export interface Versions {\n  private: number;\n  public: number;\n}\n\nexport declare class HDKeyT {\n  public static HARDENED_OFFSET: number;\n  public static fromMasterSeed(seed: Buffer, versions?: Versions): HDKeyT;\n  public static fromExtendedKey(base58key: string, versions?: Versions): HDKeyT;\n  public static fromJSON(json: { xpriv: string }): HDKeyT;\n\n  public versions: Versions;\n  public depth: number;\n  public index: number;\n  public chainCode: Buffer | null;\n  public privateKey: Buffer | null;\n  public publicKey: Buffer | null;\n  public fingerprint: number;\n  public parentFingerprint: number;\n  public pubKeyHash: Buffer | undefined;\n  public identifier: Buffer | undefined;\n  public privateExtendedKey: string;\n  public publicExtendedKey: string;\n\n  private constructor(versios: Versions);\n  public derive(path: string): HDKeyT;\n  public deriveChild(index: number): HDKeyT;\n  public sign(hash: Buffer): Buffer;\n  public verify(hash: Buffer, signature: Buffer): boolean;\n  public wipePrivateData(): this;\n  public toJSON(): { xpriv: string; xpub: string };\n}\n\nconst hdkey: typeof HDKeyT = require(\"./vendor/hdkey-without-crypto\");\n\nexport const HDKey = hdkey;\n"]}