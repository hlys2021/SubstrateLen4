{"version":3,"file":"pbkdf2.js","sourceRoot":"","sources":["../../../../bak_node_modules/ethereum-cryptography/src/pbkdf2.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iDAAmC;AAEnC,SAAgB,MAAM,CACpB,QAAgB,EAChB,IAAY,EACZ,UAAkB,EAClB,MAAc,EACd,MAAc;IAEd,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,QAAQ,CAAC,MAAM,CACb,QAAQ,EACR,IAAI,EACJ,UAAU,EACV,MAAM,EACN,MAAM,EACN,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;YACd,IAAI,GAAG,EAAE;gBACP,MAAM,CAAC,GAAG,CAAC,CAAC;gBACZ,OAAO;aACR;YAED,OAAO,CAAC,MAAM,CAAC,CAAC;QAClB,CAAC,CACF,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC;AAxBD,wBAwBC;AAED,SAAgB,UAAU,CACxB,QAAgB,EAChB,IAAY,EACZ,UAAkB,EAClB,MAAc,EACd,MAAc;IAEd,OAAO,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AACzE,CAAC;AARD,gCAQC","sourcesContent":["import * as pbkdf2Js from \"pbkdf2\";\n\nexport function pbkdf2(\n  password: Buffer,\n  salt: Buffer,\n  iterations: number,\n  keylen: number,\n  digest: string\n): Promise<Buffer> {\n  return new Promise((resolve, reject) => {\n    pbkdf2Js.pbkdf2(\n      password,\n      salt,\n      iterations,\n      keylen,\n      digest,\n      (err, result) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(result);\n      }\n    );\n  });\n}\n\nexport function pbkdf2Sync(\n  password: Buffer,\n  salt: Buffer,\n  iterations: number,\n  keylen: number,\n  digest: string\n): Buffer {\n  return pbkdf2Js.pbkdf2Sync(password, salt, iterations, keylen, digest);\n}\n"]}