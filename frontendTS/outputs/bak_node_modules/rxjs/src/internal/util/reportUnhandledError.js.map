{"version":3,"file":"reportUnhandledError.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/util/reportUnhandledError.ts"],"names":[],"mappings":";;;AAAA,sCAAmC;AACnC,kEAA+D;AAE/D;;;;;;;;GAQG;AACH,SAAgB,oBAAoB,CAAC,GAAQ;IAC3C,iCAAe,CAAC,UAAU,CAAC,GAAG,EAAE;QAC9B,MAAM,EAAE,gBAAgB,EAAE,GAAG,eAAM,CAAC;QACpC,IAAI,gBAAgB,EAAE;YACpB,6CAA6C;YAC7C,gBAAgB,CAAC,GAAG,CAAC,CAAC;SACvB;aAAM;YACL,sEAAsE;YACtE,MAAM,GAAG,CAAC;SACX;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAXD,oDAWC","sourcesContent":["import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n"]}