{"version":3,"file":"isReadableStreamLike.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/util/isReadableStreamLike.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,6CAA0C;AAE1C,SAAuB,kCAAkC,CAAI,cAAqC;;QAChG,MAAM,MAAM,GAAG,cAAc,CAAC,SAAS,EAAE,CAAC;QAC1C,IAAI;YACF,OAAO,IAAI,EAAE;gBACX,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,cAAM,MAAM,CAAC,IAAI,EAAE,CAAA,CAAC;gBAC5C,IAAI,IAAI,EAAE;oBACR,6BAAO;iBACR;gBACD,oBAAM,KAAM,CAAA,CAAC;aACd;SACF;gBAAS;YACR,MAAM,CAAC,WAAW,EAAE,CAAC;SACtB;IACH,CAAC;CAAA;AAbD,gFAaC;AAED,SAAgB,oBAAoB,CAAI,GAAQ;IAC9C,mEAAmE;IACnE,4DAA4D;IAC5D,OAAO,IAAA,uBAAU,EAAC,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,SAAS,CAAC,CAAC;AACpC,CAAC;AAJD,oDAIC","sourcesContent":["import { ReadableStreamLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport async function* readableStreamLikeToAsyncGenerator<T>(readableStream: ReadableStreamLike<T>): AsyncGenerator<T> {\n  const reader = readableStream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value!;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function isReadableStreamLike<T>(obj: any): obj is ReadableStreamLike<T> {\n  // We don't want to use instanceof checks because they would return\n  // false for instances from another Realm, like an <iframe>.\n  return isFunction(obj?.getReader);\n}\n"]}