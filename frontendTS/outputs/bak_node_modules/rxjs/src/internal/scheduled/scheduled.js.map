{"version":3,"file":"scheduled.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/scheduled/scheduled.ts"],"names":[],"mappings":";;;AAAA,6DAA0D;AAC1D,uDAAoD;AACpD,mDAAgD;AAChD,yDAAsD;AACtD,mEAAgE;AAChE,qEAAkE;AAClE,iDAA8C;AAC9C,qDAAkD;AAClD,mDAAgD;AAGhD,6DAA0D;AAC1D,2EAAkF;AAClF,uEAAoE;AACpE,6EAA0E;AAE1E;;;;;;;;;;GAUG;AACH,SAAgB,SAAS,CAAI,KAAyB,EAAE,SAAwB;IAC9E,IAAI,KAAK,IAAI,IAAI,EAAE;QACjB,IAAI,IAAA,yCAAmB,EAAC,KAAK,CAAC,EAAE;YAC9B,OAAO,IAAA,uCAAkB,EAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SAC7C;QACD,IAAI,IAAA,yBAAW,EAAC,KAAK,CAAC,EAAE;YACtB,OAAO,IAAA,6BAAa,EAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SACxC;QACD,IAAI,IAAA,qBAAS,EAAC,KAAK,CAAC,EAAE;YACpB,OAAO,IAAA,iCAAe,EAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SAC1C;QACD,IAAI,IAAA,iCAAe,EAAC,KAAK,CAAC,EAAE;YAC1B,OAAO,IAAA,6CAAqB,EAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SAChD;QACD,IAAI,IAAA,uBAAU,EAAC,KAAK,CAAC,EAAE;YACrB,OAAO,IAAA,mCAAgB,EAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SAC3C;QACD,IAAI,IAAA,2CAAoB,EAAC,KAAK,CAAC,EAAE;YAC/B,OAAO,IAAA,uDAA0B,EAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SACrD;KACF;IACD,MAAM,IAAA,yDAAgC,EAAC,KAAK,CAAC,CAAC;AAChD,CAAC;AAtBD,8BAsBC","sourcesContent":["import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n"]}