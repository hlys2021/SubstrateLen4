{"version":3,"file":"scheduleIterable.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/scheduled/scheduleIterable.ts"],"names":[],"mappings":";;;AAAA,8CAA2C;AAE3C,iDAAiE;AACjE,mDAAgD;AAChD,6DAA0D;AAE1D;;;;GAIG;AACH,SAAgB,gBAAgB,CAAI,KAAkB,EAAE,SAAwB;IAC9E,OAAO,IAAI,uBAAU,CAAI,CAAC,UAAU,EAAE,EAAE;QACtC,IAAI,QAAwB,CAAC;QAE7B,qDAAqD;QACrD,uDAAuD;QACvD,4CAA4C;QAC5C,IAAA,iCAAe,EAAC,UAAU,EAAE,SAAS,EAAE,GAAG,EAAE;YAC1C,uBAAuB;YACvB,QAAQ,GAAI,KAAa,CAAC,mBAAe,CAAC,EAAE,CAAC;YAE7C,IAAA,iCAAe,EACb,UAAU,EACV,SAAS,EACT,GAAG,EAAE;gBACH,IAAI,KAAQ,CAAC;gBACb,IAAI,IAAyB,CAAC;gBAC9B,IAAI;oBACF,qCAAqC;oBACrC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;iBACrC;gBAAC,OAAO,GAAG,EAAE;oBACZ,kDAAkD;oBAClD,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBACtB,OAAO;iBACR;gBAED,IAAI,IAAI,EAAE;oBACR,oDAAoD;oBACpD,oDAAoD;oBACpD,4DAA4D;oBAC5D,6CAA6C;oBAC7C,UAAU,CAAC,QAAQ,EAAE,CAAC;iBACvB;qBAAM;oBACL,4CAA4C;oBAC5C,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACxB;YACH,CAAC,EACD,CAAC,EACD,IAAI,CACL,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,sEAAsE;QACtE,uEAAuE;QACvE,0EAA0E;QAC1E,2DAA2D;QAC3D,OAAO,GAAG,EAAE,CAAC,IAAA,uBAAU,EAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAC,IAAI,QAAQ,CAAC,MAAM,EAAE,CAAC;IACjE,CAAC,CAAC,CAAC;AACL,CAAC;AAhDD,4CAgDC","sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    executeSchedule(subscriber, scheduler, () => {\n      // Create the iterator.\n      iterator = (input as any)[Symbol_iterator]();\n\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          let value: T;\n          let done: boolean | undefined;\n          try {\n            // Pull the value out of the iterator\n            ({ value, done } = iterator.next());\n          } catch (err) {\n            // We got an error while pulling from the iterator\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n          }\n        },\n        0,\n        true\n      );\n    });\n\n    // During finalization, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n"]}