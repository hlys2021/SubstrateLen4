{"version":3,"file":"scheduleArray.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/scheduled/scheduleArray.ts"],"names":[],"mappings":";;;AAAA,8CAA2C;AAG3C,SAAgB,aAAa,CAAI,KAAmB,EAAE,SAAwB;IAC5E,OAAO,IAAI,uBAAU,CAAI,CAAC,UAAU,EAAE,EAAE;QACtC,2BAA2B;QAC3B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,qDAAqD;QACrD,OAAO,SAAS,CAAC,QAAQ,CAAC;YACxB,IAAI,CAAC,KAAK,KAAK,CAAC,MAAM,EAAE;gBACtB,kDAAkD;gBAClD,iCAAiC;gBACjC,UAAU,CAAC,QAAQ,EAAE,CAAC;aACvB;iBAAM;gBACL,uDAAuD;gBACvD,4BAA4B;gBAC5B,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAC5B,+DAA+D;gBAC/D,+DAA+D;gBAC/D,qBAAqB;gBACrB,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;oBACtB,IAAI,CAAC,QAAQ,EAAE,CAAC;iBACjB;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AAvBD,sCAuBC","sourcesContent":["import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n"]}