{"version":3,"file":"AjaxResponse.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/ajax/AjaxResponse.ts"],"names":[],"mappings":";;;AACA,qDAAkD;AAElD;;;;;;;;;;;;;GAaG;AACH,MAAa,YAAY;IAmCvB;;;;;;;;;;;OAWG;IACH;IACE;;OAEG;IACa,aAA4B;IAC5C;;;;OAIG;IACa,GAAmB;IACnC;;OAEG;IACa,OAAoB;IACpC;;;;;;;;;;;;OAYG;IACa,OAAyB,eAAe;QAxBxC,kBAAa,GAAb,aAAa,CAAe;QAM5B,QAAG,GAAH,GAAG,CAAgB;QAInB,YAAO,GAAP,OAAO,CAAa;QAcpB,SAAI,GAAJ,IAAI,CAAoC;QAExD,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,GAAG,GAAG,CAAC;QACrC,IAAI,CAAC,MAAM,GAAG,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,YAAY,GAAG,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,EAAE,CAAC;QAEvC,qEAAqE;QACrE,4EAA4E;QAC5E,mDAAmD;QACnD,EAAE;QACF,0BAA0B;QAC1B,iCAAiC;QACjC,uDAAuD;QACvD,MAAM,UAAU,GAAG,GAAG,CAAC,qBAAqB,EAAE,CAAC;QAC/C,IAAI,CAAC,eAAe,GAAG,UAAU;YAC/B,CAAC,CAAC,mCAAmC;gBACnC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,OAA+B,EAAE,IAAI,EAAE,EAAE;oBACtE,uCAAuC;oBACvC,0CAA0C;oBAC1C,iCAAiC;oBACjC,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBACtD,OAAO,OAAO,CAAC;gBACjB,CAAC,EAAE,EAAE,CAAC;YACR,CAAC,CAAC,EAAE,CAAC;QAEP,IAAI,CAAC,QAAQ,GAAG,IAAA,+BAAc,EAAC,GAAG,CAAC,CAAC;QACpC,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,aAAa,CAAC;QACxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;CACF;AA1GD,oCA0GC","sourcesContent":["import { AjaxRequest, AjaxResponseType } from './types';\nimport { getXHRResponse } from './getXHRResponse';\n\n/**\n * A normalized response from an AJAX request. To get the data from the response,\n * you will want to read the `response` property.\n *\n * - DO NOT create instances of this class directly.\n * - DO NOT subclass this class.\n *\n * It is advised not to hold this object in memory, as it has a reference to\n * the original XHR used to make the request, as well as properties containing\n * request and response data.\n *\n * @see {@link ajax}\n * @see {@link AjaxConfig}\n */\nexport class AjaxResponse<T> {\n  /** The HTTP status code */\n  readonly status: number;\n\n  /**\n   * The response data, if any. Note that this will automatically be converted to the proper type\n   */\n  readonly response: T;\n\n  /**\n   * The responseType set on the request. (For example: `\"\"`, `\"arraybuffer\"`, `\"blob\"`, `\"document\"`, `\"json\"`, or `\"text\"`)\n   * @deprecated There isn't much reason to examine this. It's the same responseType set (or defaulted) on the ajax config.\n   * If you really need to examine this value, you can check it on the `request` or the `xhr`. Will be removed in v8.\n   */\n  readonly responseType: XMLHttpRequestResponseType;\n\n  /**\n   * The total number of bytes loaded so far. To be used with {@link total} while\n   * calculating progress. (You will want to set {@link includeDownloadProgress} or\n   * {@link includeDownloadProgress})\n   */\n  readonly loaded: number;\n\n  /**\n   * The total number of bytes to be loaded. To be used with {@link loaded} while\n   * calculating progress. (You will want to set {@link includeDownloadProgress} or\n   * {@link includeDownloadProgress})\n   */\n  readonly total: number;\n\n  /**\n   * A dictionary of the response headers.\n   */\n  readonly responseHeaders: Record<string, string>;\n\n  /**\n   * A normalized response from an AJAX request. To get the data from the response,\n   * you will want to read the `response` property.\n   *\n   * - DO NOT create instances of this class directly.\n   * - DO NOT subclass this class.\n   *\n   * @param originalEvent The original event object from the XHR `onload` event.\n   * @param xhr The `XMLHttpRequest` object used to make the request. This is useful for examining status code, etc.\n   * @param request The request settings used to make the HTTP request.\n   * @param type The type of the event emitted by the {@link ajax} Observable\n   */\n  constructor(\n    /**\n     * The original event object from the raw XHR event.\n     */\n    public readonly originalEvent: ProgressEvent,\n    /**\n     * The XMLHttpRequest object used to make the request.\n     * NOTE: It is advised not to hold this in memory, as it will retain references to all of it's event handlers\n     * and many other things related to the request.\n     */\n    public readonly xhr: XMLHttpRequest,\n    /**\n     * The request parameters used to make the HTTP request.\n     */\n    public readonly request: AjaxRequest,\n    /**\n     * The event type. This can be used to discern between different events\n     * if you're using progress events with {@link includeDownloadProgress} or\n     * {@link includeUploadProgress} settings in {@link AjaxConfig}.\n     *\n     * The event type consists of two parts: the {@link AjaxDirection} and the\n     * the event type. Merged with `_`, they form the `type` string. The\n     * direction can be an `upload` or a `download` direction, while an event can\n     * be `loadstart`, `progress` or `load`.\n     *\n     * `download_load` is the type of event when download has finished and the\n     * response is available.\n     */\n    public readonly type: AjaxResponseType = 'download_load'\n  ) {\n    const { status, responseType } = xhr;\n    this.status = status ?? 0;\n    this.responseType = responseType ?? '';\n\n    // Parse the response headers in advance for the user. There's really\n    // not a great way to get all of them. So we need to parse the header string\n    // we get back. It comes in a simple enough format:\n    //\n    // header-name: value here\n    // content-type: application/json\n    // other-header-here: some, other, values, or, whatever\n    const allHeaders = xhr.getAllResponseHeaders();\n    this.responseHeaders = allHeaders\n      ? // Split the header text into lines\n        allHeaders.split('\\n').reduce((headers: Record<string, string>, line) => {\n          // Split the lines on the first \": \" as\n          // \"key: value\". Note that the value could\n          // technically have a \": \" in it.\n          const index = line.indexOf(': ');\n          headers[line.slice(0, index)] = line.slice(index + 2);\n          return headers;\n        }, {})\n      : {};\n\n    this.response = getXHRResponse(xhr);\n    const { loaded, total } = originalEvent;\n    this.loaded = loaded;\n    this.total = total;\n  }\n}\n"]}