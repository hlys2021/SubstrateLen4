{"version":3,"file":"ajax.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/ajax/ajax.ts"],"names":[],"mappings":"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","sourcesContent":["import { map } from '../operators/map';\nimport { Observable } from '../Observable';\nimport { AjaxConfig, AjaxRequest, AjaxDirection, ProgressEventType } from './types';\nimport { AjaxResponse } from './AjaxResponse';\nimport { AjaxTimeoutError, AjaxError } from './errors';\n\nexport interface AjaxCreationMethod {\n  /**\n   * Creates an observable that will perform an AJAX request using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default.\n   *\n   * This is the most configurable option, and the basis for all other AJAX calls in the library.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { ajax } from 'rxjs/ajax';\n   * import { map, catchError, of } from 'rxjs';\n   *\n   * const obs$ = ajax({\n   *   method: 'GET',\n   *   url: 'https://api.github.com/users?per_page=5',\n   *   responseType: 'json'\n   * }).pipe(\n   *   map(userResponse => console.log('users: ', userResponse)),\n   *   catchError(error => {\n   *     console.log('error: ', error);\n   *     return of(error);\n   *   })\n   * );\n   * ```\n   */\n  <T>(config: AjaxConfig): Observable<AjaxResponse<T>>;\n\n  /**\n   * Perform an HTTP GET using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope. Defaults to a `responseType` of `\"json\"`.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { ajax } from 'rxjs/ajax';\n   * import { map, catchError, of } from 'rxjs';\n   *\n   * const obs$ = ajax('https://api.github.com/users?per_page=5').pipe(\n   *   map(userResponse => console.log('users: ', userResponse)),\n   *   catchError(error => {\n   *     console.log('error: ', error);\n   *     return of(error);\n   *   })\n   * );\n   * ```\n   */\n  <T>(url: string): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP GET using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * @param url The URL to get the resource from\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  get<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP POST using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * Before sending the value passed to the `body` argument, it is automatically serialized\n   * based on the specified `responseType`. By default, a JavaScript object will be serialized\n   * to JSON. A `responseType` of `application/x-www-form-urlencoded` will flatten any provided\n   * dictionary object to a url-encoded string.\n   *\n   * @param url The URL to get the resource from\n   * @param body The content to send. The body is automatically serialized.\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  post<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP PUT using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * Before sending the value passed to the `body` argument, it is automatically serialized\n   * based on the specified `responseType`. By default, a JavaScript object will be serialized\n   * to JSON. A `responseType` of `application/x-www-form-urlencoded` will flatten any provided\n   * dictionary object to a url-encoded string.\n   *\n   * @param url The URL to get the resource from\n   * @param body The content to send. The body is automatically serialized.\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  put<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP PATCH using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * Before sending the value passed to the `body` argument, it is automatically serialized\n   * based on the specified `responseType`. By default, a JavaScript object will be serialized\n   * to JSON. A `responseType` of `application/x-www-form-urlencoded` will flatten any provided\n   * dictionary object to a url-encoded string.\n   *\n   * @param url The URL to get the resource from\n   * @param body The content to send. The body is automatically serialized.\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  patch<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP DELETE using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and a `responseType` of `\"json\"`.\n   *\n   * @param url The URL to get the resource from\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  delete<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>>;\n\n  /**\n   * Performs an HTTP GET using the\n   * [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) in\n   * global scope by default, and returns the hydrated JavaScript object from the\n   * response.\n   *\n   * @param url The URL to get the resource from\n   * @param headers Optional headers. Case-Insensitive.\n   */\n  getJSON<T>(url: string, headers?: Record<string, string>): Observable<T>;\n}\n\nfunction ajaxGet<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'GET', url, headers });\n}\n\nfunction ajaxPost<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'POST', url, body, headers });\n}\n\nfunction ajaxDelete<T>(url: string, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'DELETE', url, headers });\n}\n\nfunction ajaxPut<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'PUT', url, body, headers });\n}\n\nfunction ajaxPatch<T>(url: string, body?: any, headers?: Record<string, string>): Observable<AjaxResponse<T>> {\n  return ajax({ method: 'PATCH', url, body, headers });\n}\n\nconst mapResponse = map((x: AjaxResponse<any>) => x.response);\n\nfunction ajaxGetJSON<T>(url: string, headers?: Record<string, string>): Observable<T> {\n  return mapResponse(\n    ajax<T>({\n      method: 'GET',\n      url,\n      headers,\n    })\n  );\n}\n\n/**\n * There is an ajax operator on the Rx object.\n *\n * It creates an observable for an Ajax request with either a request object with\n * url, headers, etc or a string for a URL.\n *\n * ## Examples\n *\n * Using `ajax()` to fetch the response object that is being returned from API\n *\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError, of } from 'rxjs';\n *\n * const obs$ = ajax('https://api.github.com/users?per_page=5').pipe(\n *   map(userResponse => console.log('users: ', userResponse)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n *\n * obs$.subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(err)\n * });\n * ```\n *\n * Using `ajax.getJSON()` to fetch data from API\n *\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError, of } from 'rxjs';\n *\n * const obs$ = ajax.getJSON('https://api.github.com/users?per_page=5').pipe(\n *   map(userResponse => console.log('users: ', userResponse)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n *\n * obs$.subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(err)\n * });\n * ```\n *\n * Using `ajax()` with object as argument and method POST with a two seconds delay\n *\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError, of } from 'rxjs';\n *\n * const users = ajax({\n *   url: 'https://httpbin.org/delay/2',\n *   method: 'POST',\n *   headers: {\n *     'Content-Type': 'application/json',\n *     'rxjs-custom-header': 'Rxjs'\n *   },\n *   body: {\n *     rxjs: 'Hello World!'\n *   }\n * }).pipe(\n *   map(response => console.log('response: ', response)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n *\n * users.subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(err)\n * });\n * ```\n *\n * Using `ajax()` to fetch. An error object that is being returned from the request\n *\n * ```ts\n * import { ajax } from 'rxjs/ajax';\n * import { map, catchError, of } from 'rxjs';\n *\n * const obs$ = ajax('https://api.github.com/404').pipe(\n *   map(userResponse => console.log('users: ', userResponse)),\n *   catchError(error => {\n *     console.log('error: ', error);\n *     return of(error);\n *   })\n * );\n *\n * obs$.subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(err)\n * });\n * ```\n */\nexport const ajax: AjaxCreationMethod = (() => {\n  const create = <T>(urlOrConfig: string | AjaxConfig) => {\n    const config: AjaxConfig =\n      typeof urlOrConfig === 'string'\n        ? {\n            url: urlOrConfig,\n          }\n        : urlOrConfig;\n    return fromAjax<T>(config);\n  };\n\n  create.get = ajaxGet;\n  create.post = ajaxPost;\n  create.delete = ajaxDelete;\n  create.put = ajaxPut;\n  create.patch = ajaxPatch;\n  create.getJSON = ajaxGetJSON;\n\n  return create;\n})();\n\nconst UPLOAD = 'upload';\nconst DOWNLOAD = 'download';\nconst LOADSTART = 'loadstart';\nconst PROGRESS = 'progress';\nconst LOAD = 'load';\n\nexport function fromAjax<T>(init: AjaxConfig): Observable<AjaxResponse<T>> {\n  return new Observable((destination) => {\n    const config = {\n      // Defaults\n      async: true,\n      crossDomain: false,\n      withCredentials: false,\n      method: 'GET',\n      timeout: 0,\n      responseType: 'json' as XMLHttpRequestResponseType,\n\n      ...init,\n    };\n\n    const { queryParams, body: configuredBody, headers: configuredHeaders } = config;\n\n    let url = config.url;\n    if (!url) {\n      throw new TypeError('url is required');\n    }\n\n    if (queryParams) {\n      let searchParams: URLSearchParams;\n      if (url.includes('?')) {\n        // If the user has passed a URL with a querystring already in it,\n        // we need to combine them. So we're going to split it. There\n        // should only be one `?` in a valid URL.\n        const parts = url.split('?');\n        if (2 < parts.length) {\n          throw new TypeError('invalid url');\n        }\n        // Add the passed queryParams to the params already in the url provided.\n        searchParams = new URLSearchParams(parts[1]);\n        // queryParams is converted to any because the runtime is *much* more permissive than\n        // the types are.\n        new URLSearchParams(queryParams as any).forEach((value, key) => searchParams.set(key, value));\n        // We have to do string concatenation here, because `new URL(url)` does\n        // not like relative URLs like `/this` without a base url, which we can't\n        // specify, nor can we assume `location` will exist, because of node.\n        url = parts[0] + '?' + searchParams;\n      } else {\n        // There is no preexisting querystring, so we can just use URLSearchParams\n        // to convert the passed queryParams into the proper format and encodings.\n        // queryParams is converted to any because the runtime is *much* more permissive than\n        // the types are.\n        searchParams = new URLSearchParams(queryParams as any);\n        url = url + '?' + searchParams;\n      }\n    }\n\n    // Normalize the headers. We're going to make them all lowercase, since\n    // Headers are case insensitive by design. This makes it easier to verify\n    // that we aren't setting or sending duplicates.\n    const headers: Record<string, any> = {};\n    if (configuredHeaders) {\n      for (const key in configuredHeaders) {\n        if (configuredHeaders.hasOwnProperty(key)) {\n          headers[key.toLowerCase()] = configuredHeaders[key];\n        }\n      }\n    }\n\n    const crossDomain = config.crossDomain;\n\n    // Set the x-requested-with header. This is a non-standard header that has\n    // come to be a de facto standard for HTTP requests sent by libraries and frameworks\n    // using XHR. However, we DO NOT want to set this if it is a CORS request. This is\n    // because sometimes this header can cause issues with CORS. To be clear,\n    // None of this is necessary, it's only being set because it's \"the thing libraries do\"\n    // Starting back as far as JQuery, and continuing with other libraries such as Angular 1,\n    // Axios, et al.\n    if (!crossDomain && !('x-requested-with' in headers)) {\n      headers['x-requested-with'] = 'XMLHttpRequest';\n    }\n\n    // Allow users to provide their XSRF cookie name and the name of a custom header to use to\n    // send the cookie.\n    const { withCredentials, xsrfCookieName, xsrfHeaderName } = config;\n    if ((withCredentials || !crossDomain) && xsrfCookieName && xsrfHeaderName) {\n      const xsrfCookie = document?.cookie.match(new RegExp(`(^|;\\\\s*)(${xsrfCookieName})=([^;]*)`))?.pop() ?? '';\n      if (xsrfCookie) {\n        headers[xsrfHeaderName] = xsrfCookie;\n      }\n    }\n\n    // Examine the body and determine whether or not to serialize it\n    // and set the content-type in `headers`, if we're able.\n    const body = extractContentTypeAndMaybeSerializeBody(configuredBody, headers);\n\n    // The final request settings.\n    const _request: Readonly<AjaxRequest> = {\n      ...config,\n\n      // Set values we ensured above\n      url,\n      headers,\n      body,\n    };\n\n    let xhr: XMLHttpRequest;\n\n    // Create our XHR so we can get started.\n    xhr = init.createXHR ? init.createXHR() : new XMLHttpRequest();\n\n    {\n      ///////////////////////////////////////////////////\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      ///////////////////////////////////////////////////\n\n      const { progressSubscriber, includeDownloadProgress = false, includeUploadProgress = false } = init;\n\n      /**\n       * Wires up an event handler that will emit an error when fired. Used\n       * for timeout and abort events.\n       * @param type The type of event we're treating as an error\n       * @param errorFactory A function that creates the type of error to emit.\n       */\n      const addErrorEvent = (type: string, errorFactory: () => any) => {\n        xhr.addEventListener(type, () => {\n          const error = errorFactory();\n          progressSubscriber?.error?.(error);\n          destination.error(error);\n        });\n      };\n\n      // If the request times out, handle errors appropriately.\n      addErrorEvent('timeout', () => new AjaxTimeoutError(xhr, _request));\n\n      // If the request aborts (due to a network disconnection or the like), handle\n      // it as an error.\n      addErrorEvent('abort', () => new AjaxError('aborted', xhr, _request));\n\n      /**\n       * Creates a response object to emit to the consumer.\n       * @param direction the direction related to the event. Prefixes the event `type` in the\n       * `AjaxResponse` object with \"upload_\" for events related to uploading and \"download_\"\n       * for events related to downloading.\n       * @param event the actual event object.\n       */\n      const createResponse = (direction: AjaxDirection, event: ProgressEvent) =>\n        new AjaxResponse<T>(event, xhr, _request, `${direction}_${event.type as ProgressEventType}` as const);\n\n      /**\n       * Wires up an event handler that emits a Response object to the consumer, used for\n       * all events that emit responses, loadstart, progress, and load.\n       * Note that download load handling is a bit different below, because it has\n       * more logic it needs to run.\n       * @param target The target, either the XHR itself or the Upload object.\n       * @param type The type of event to wire up\n       * @param direction The \"direction\", used to prefix the response object that is\n       * emitted to the consumer. (e.g. \"upload_\" or \"download_\")\n       */\n      const addProgressEvent = (target: any, type: string, direction: AjaxDirection) => {\n        target.addEventListener(type, (event: ProgressEvent) => {\n          destination.next(createResponse(direction, event));\n        });\n      };\n\n      if (includeUploadProgress) {\n        [LOADSTART, PROGRESS, LOAD].forEach((type) => addProgressEvent(xhr.upload, type, UPLOAD));\n      }\n\n      if (progressSubscriber) {\n        [LOADSTART, PROGRESS].forEach((type) => xhr.upload.addEventListener(type, (e: any) => progressSubscriber?.next?.(e)));\n      }\n\n      if (includeDownloadProgress) {\n        [LOADSTART, PROGRESS].forEach((type) => addProgressEvent(xhr, type, DOWNLOAD));\n      }\n\n      const emitError = (status?: number) => {\n        const msg = 'ajax error' + (status ? ' ' + status : '');\n        destination.error(new AjaxError(msg, xhr, _request));\n      };\n\n      xhr.addEventListener('error', (e) => {\n        progressSubscriber?.error?.(e);\n        emitError();\n      });\n\n      xhr.addEventListener(LOAD, (event) => {\n        const { status } = xhr;\n        // 4xx and 5xx should error (https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)\n        if (status < 400) {\n          progressSubscriber?.complete?.();\n\n          let response: AjaxResponse<T>;\n          try {\n            // This can throw in IE, because we end up needing to do a JSON.parse\n            // of the response in some cases to produce object we'd expect from\n            // modern browsers.\n            response = createResponse(DOWNLOAD, event);\n          } catch (err) {\n            destination.error(err);\n            return;\n          }\n\n          destination.next(response);\n          destination.complete();\n        } else {\n          progressSubscriber?.error?.(event);\n          emitError(status);\n        }\n      });\n    }\n\n    const { user, method, async } = _request;\n    // open XHR\n    if (user) {\n      xhr.open(method, url, async, user, _request.password);\n    } else {\n      xhr.open(method, url, async);\n    }\n\n    // timeout, responseType and withCredentials can be set once the XHR is open\n    if (async) {\n      xhr.timeout = _request.timeout;\n      xhr.responseType = _request.responseType;\n    }\n\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = _request.withCredentials;\n    }\n\n    // set headers\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n\n    // finally send the request\n    if (body) {\n      xhr.send(body);\n    } else {\n      xhr.send();\n    }\n\n    return () => {\n      if (xhr && xhr.readyState !== 4 /*XHR done*/) {\n        xhr.abort();\n      }\n    };\n  });\n}\n\n/**\n * Examines the body to determine if we need to serialize it for them or not.\n * If the body is a type that XHR handles natively, we just allow it through,\n * otherwise, if the body is something that *we* can serialize for the user,\n * we will serialize it, and attempt to set the `content-type` header, if it's\n * not already set.\n * @param body The body passed in by the user\n * @param headers The normalized headers\n */\nfunction extractContentTypeAndMaybeSerializeBody(body: any, headers: Record<string, string>) {\n  if (\n    !body ||\n    typeof body === 'string' ||\n    isFormData(body) ||\n    isURLSearchParams(body) ||\n    isArrayBuffer(body) ||\n    isFile(body) ||\n    isBlob(body) ||\n    isReadableStream(body)\n  ) {\n    // The XHR instance itself can handle serializing these, and set the content-type for us\n    // so we don't need to do that. https://xhr.spec.whatwg.org/#the-send()-method\n    return body;\n  }\n\n  if (isArrayBufferView(body)) {\n    // This is a typed array (e.g. Float32Array or Uint8Array), or a DataView.\n    // XHR can handle this one too: https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n    return body.buffer;\n  }\n\n  if (typeof body === 'object') {\n    // If we have made it here, this is an object, probably a POJO, and we'll try\n    // to serialize it for them. If this doesn't work, it will throw, obviously, which\n    // is okay. The workaround for users would be to manually set the body to their own\n    // serialized string (accounting for circular references or whatever), then set\n    // the content-type manually as well.\n    headers['content-type'] = headers['content-type'] ?? 'application/json;charset=utf-8';\n    return JSON.stringify(body);\n  }\n\n  // If we've gotten past everything above, this is something we don't quite know how to\n  // handle. Throw an error. This will be caught and emitted from the observable.\n  throw new TypeError('Unknown body type');\n}\n\nconst _toString = Object.prototype.toString;\n\nfunction toStringCheck(obj: any, name: string): boolean {\n  return _toString.call(obj) === `[object ${name}]`;\n}\n\nfunction isArrayBuffer(body: any): body is ArrayBuffer {\n  return toStringCheck(body, 'ArrayBuffer');\n}\n\nfunction isFile(body: any): body is File {\n  return toStringCheck(body, 'File');\n}\n\nfunction isBlob(body: any): body is Blob {\n  return toStringCheck(body, 'Blob');\n}\n\nfunction isArrayBufferView(body: any): body is ArrayBufferView {\n  return typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView(body);\n}\n\nfunction isFormData(body: any): body is FormData {\n  return typeof FormData !== 'undefined' && body instanceof FormData;\n}\n\nfunction isURLSearchParams(body: any): body is URLSearchParams {\n  return typeof URLSearchParams !== 'undefined' && body instanceof URLSearchParams;\n}\n\nfunction isReadableStream(body: any): body is ReadableStream {\n  return typeof ReadableStream !== 'undefined' && body instanceof ReadableStream;\n}\n"]}