{"version":3,"file":"scanInternals.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/operators/scanInternals.ts"],"names":[],"mappings":";;;AAEA,6DAAgE;AAEhE;;;;;;;GAOG;AAEH,SAAgB,aAAa,CAC3B,WAA2D,EAC3D,IAAO,EACP,OAAgB,EAChB,UAAmB,EACnB,kBAAqC;IAErC,OAAO,CAAC,MAAqB,EAAE,UAA2B,EAAE,EAAE;QAC5D,sDAAsD;QACtD,wDAAwD;QACxD,gBAAgB;QAChB,IAAI,QAAQ,GAAG,OAAO,CAAC;QACvB,yDAAyD;QACzD,wDAAwD;QACxD,yCAAyC;QACzC,IAAI,KAAK,GAAQ,IAAI,CAAC;QACtB,gDAAgD;QAChD,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,0EAA0E;QAC1E,MAAM,CAAC,SAAS,CACd,IAAA,6CAAwB,EACtB,UAAU,EACV,CAAC,KAAK,EAAE,EAAE;YACR,8BAA8B;YAC9B,MAAM,CAAC,GAAG,KAAK,EAAE,CAAC;YAClB,gBAAgB;YAChB,KAAK,GAAG,QAAQ;gBACd,CAAC,CAAC,0EAA0E;oBAC1E,WAAW,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;gBAC9B,CAAC,CAAC,8DAA8D;oBAE9D,uEAAuE;oBACvE,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;YAE/B,iCAAiC;YACjC,UAAU,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;QACD,iDAAiD;QACjD,+DAA+D;QAC/D,kBAAkB;YAChB,CAAC,GAAG,EAAE;gBACJ,QAAQ,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACnC,UAAU,CAAC,QAAQ,EAAE,CAAC;YACxB,CAAC,CAAC,CACL,CACF,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAhDD,sCAgDC","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A basic scan operation. This is used for `scan` and `reduce`.\n * @param accumulator The accumulator to use\n * @param seed The seed value for the state to accumulate\n * @param hasSeed Whether or not a seed was provided\n * @param emitOnNext Whether or not to emit the state on next\n * @param emitBeforeComplete Whether or not to emit the before completion\n */\n\nexport function scanInternals<V, A, S>(\n  accumulator: (acc: V | A | S, value: V, index: number) => A,\n  seed: S,\n  hasSeed: boolean,\n  emitOnNext: boolean,\n  emitBeforeComplete?: undefined | true\n) {\n  return (source: Observable<V>, subscriber: Subscriber<any>) => {\n    // Whether or not we have state yet. This will only be\n    // false before the first value arrives if we didn't get\n    // a seed value.\n    let hasState = hasSeed;\n    // The state that we're tracking, starting with the seed,\n    // if there is one, and then updated by the return value\n    // from the accumulator on each emission.\n    let state: any = seed;\n    // An index to pass to the accumulator function.\n    let index = 0;\n\n    // Subscribe to our source. All errors and completions are passed through.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Always increment the index.\n          const i = index++;\n          // Set the state\n          state = hasState\n            ? // We already have state, so we can get the new state from the accumulator\n              accumulator(state, value, i)\n            : // We didn't have state yet, a seed value was not provided, so\n\n              // we set the state to the first value, and mark that we have state now\n              ((hasState = true), value);\n\n          // Maybe send it to the consumer.\n          emitOnNext && subscriber.next(state);\n        },\n        // If an onComplete was given, call it, otherwise\n        // just pass through the complete notification to the consumer.\n        emitBeforeComplete &&\n          (() => {\n            hasState && subscriber.next(state);\n            subscriber.complete();\n          })\n      )\n    );\n  };\n}\n"]}