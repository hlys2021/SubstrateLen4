{"version":3,"file":"joinAllInternals.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/operators/joinAllInternals.ts"],"names":[],"mappings":";;;AAEA,+CAA4C;AAC5C,+DAA4D;AAC5D,uCAAoC;AACpC,yCAAsC;AACtC,uCAAoC;AAEpC;;;;;;;;;GASG;AACH,SAAgB,gBAAgB,CAAO,MAAwD,EAAE,OAA+B;IAC9H,OAAO,IAAA,WAAI;IACT,kEAAkE;IAClE,oBAAoB;IACpB,IAAA,iBAAO,GAAgE;IACvE,iEAAiE;IACjE,IAAA,mBAAQ,EAAC,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACtC,kEAAkE;IAClE,OAAO,CAAC,CAAC,CAAC,IAAA,mCAAgB,EAAC,OAAO,CAAC,CAAC,CAAC,CAAE,mBAAgB,CACxD,CAAC;AACJ,CAAC;AAVD,4CAUC","sourcesContent":["import { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { identity } from '../util/identity';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { mergeMap } from './mergeMap';\nimport { toArray } from './toArray';\n\n/**\n * Collects all of the inner sources from source observable. Then, once the\n * source completes, joins the values using the given static.\n *\n * This is used for {@link combineLatestAll} and {@link zipAll} which both have the\n * same behavior of collecting all inner observables, then operating on them.\n *\n * @param joinFn The type of static join to apply to the sources collected\n * @param project The projection function to apply to the values, if any\n */\nexport function joinAllInternals<T, R>(joinFn: (sources: ObservableInput<T>[]) => Observable<T>, project?: (...args: any[]) => R) {\n  return pipe(\n    // Collect all inner sources into an array, and emit them when the\n    // source completes.\n    toArray() as OperatorFunction<ObservableInput<T>, ObservableInput<T>[]>,\n    // Run the join function on the collected array of inner sources.\n    mergeMap((sources) => joinFn(sources)),\n    // If a projection function was supplied, apply it to each result.\n    project ? mapOneOrManyArgs(project) : (identity as any)\n  );\n}\n"]}