{"version":3,"file":"take.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/operators/take.ts"],"names":[],"mappings":";;;AACA,+CAA4C;AAC5C,uCAAuC;AACvC,6DAAgE;AAEhE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AACH,SAAgB,IAAI,CAAI,KAAa;IACnC,OAAO,KAAK,IAAI,CAAC;QACf,CAAC,CAAC,4CAA4C;YAC5C,GAAG,EAAE,CAAC,aAAK;QACb,CAAC,CAAC,IAAA,cAAO,EAAC,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;YAC7B,IAAI,IAAI,GAAG,CAAC,CAAC;YACb,MAAM,CAAC,SAAS,CACd,IAAA,6CAAwB,EAAC,UAAU,EAAE,CAAC,KAAK,EAAE,EAAE;gBAC7C,+CAA+C;gBAC/C,iDAAiD;gBACjD,0CAA0C;gBAC1C,IAAI,EAAE,IAAI,IAAI,KAAK,EAAE;oBACnB,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;oBACvB,8CAA8C;oBAC9C,8CAA8C;oBAC9C,uDAAuD;oBACvD,IAAI,KAAK,IAAI,IAAI,EAAE;wBACjB,UAAU,CAAC,QAAQ,EAAE,CAAC;qBACvB;iBACF;YACH,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CAAC;AACT,CAAC;AAvBD,oBAuBC","sourcesContent":["import { MonoTypeOperatorFunction } from '../types';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n *\n * Take the first 5 seconds of an infinite 1-second interval Observable\n *\n * ```ts\n * import { interval, take } from 'rxjs';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of `next` values to emit.\n * @return A function that returns an Observable that emits only the first\n * `count` values emitted by the source Observable, or all of the values from\n * the source if the source emits fewer than `count` values.\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? // If we are taking no values, that's empty.\n      () => EMPTY\n    : operate((source, subscriber) => {\n        let seen = 0;\n        source.subscribe(\n          createOperatorSubscriber(subscriber, (value) => {\n            // Increment the number of values we have seen,\n            // then check it against the allowed count to see\n            // if we are still letting values through.\n            if (++seen <= count) {\n              subscriber.next(value);\n              // If we have met or passed our allowed count,\n              // we need to complete. We have to do <= here,\n              // because re-entrant code will increment `seen` twice.\n              if (count <= seen) {\n                subscriber.complete();\n              }\n            }\n          })\n        );\n      });\n}\n"]}