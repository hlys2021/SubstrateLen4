{"version":3,"file":"zipAll.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/operators/zipAll.ts"],"names":[],"mappings":";;;AACA,2CAAwC;AACxC,yDAAsD;AAetD,SAAgB,MAAM,CAAO,OAA+B;IAC1D,OAAO,IAAA,mCAAgB,EAAC,SAAG,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC;AAFD,wBAEC","sourcesContent":["import { OperatorFunction, ObservableInput } from '../types';\nimport { zip } from '../observable/zip';\nimport { joinAllInternals } from './joinAllInternals';\n\n/**\n * Collects all observable inner sources from the source, once the source completes,\n * it will subscribe to all inner sources, combining their values by index and emitting\n * them.\n *\n * @see {@link zipWith}\n * @see {@link zip}\n */\nexport function zipAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport function zipAll<T>(): OperatorFunction<any, T[]>;\nexport function zipAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport function zipAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n\nexport function zipAll<T, R>(project?: (...values: T[]) => R) {\n  return joinAllInternals(zip, project);\n}\n"]}