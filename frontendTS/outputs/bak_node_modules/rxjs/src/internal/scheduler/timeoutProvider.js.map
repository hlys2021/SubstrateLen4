{"version":3,"file":"timeoutProvider.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/scheduler/timeoutProvider.ts"],"names":[],"mappings":";;;AAea,QAAA,eAAe,GAAoB;IAC9C,2EAA2E;IAC3E,mEAAmE;IACnE,UAAU,CAAC,OAAmB,EAAE,OAAgB,EAAE,GAAG,IAAI;QACvD,MAAM,EAAE,QAAQ,EAAE,GAAG,uBAAe,CAAC;QACrC,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,UAAU,EAAE;YACxB,OAAO,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;SACvD;QACD,OAAO,UAAU,CAAC,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;IAC/C,CAAC;IACD,YAAY,CAAC,MAAM;QACjB,MAAM,EAAE,QAAQ,EAAE,GAAG,uBAAe,CAAC;QACrC,OAAO,CAAC,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,YAAY,KAAI,YAAY,CAAC,CAAC,MAAa,CAAC,CAAC;IACjE,CAAC;IACD,QAAQ,EAAE,SAAS;CACpB,CAAC","sourcesContent":["import type { TimerHandle } from './timerHandle';\ntype SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => TimerHandle;\ntype ClearTimeoutFunction = (handle: TimerHandle) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(handler: () => void, timeout?: number, ...args) {\n    const { delegate } = timeoutProvider;\n    if (delegate?.setTimeout) {\n      return delegate.setTimeout(handler, timeout, ...args);\n    }\n    return setTimeout(handler, timeout, ...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle as any);\n  },\n  delegate: undefined,\n};\n"]}