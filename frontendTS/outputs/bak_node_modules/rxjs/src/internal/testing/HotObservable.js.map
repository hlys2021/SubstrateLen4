{"version":3,"file":"HotObservable.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/testing/HotObservable.ts"],"names":[],"mappings":";;;AAAA,wCAAqC;AAErC,kDAA+C;AAI/C,iEAA8D;AAC9D,qDAAkD;AAClD,kDAAsD;AAEtD,MAAa,aAAiB,SAAQ,iBAAU;IAQ9C,YAAmB,QAAuB,EAAE,SAAoB;QAC9D,KAAK,EAAE,CAAC;QADS,aAAQ,GAAR,QAAQ,CAAe;QAPnC,kBAAa,GAAsB,EAAE,CAAC;QAS3C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,gBAAgB;IACN,UAAU,CAAC,UAA2B;QAC9C,MAAM,OAAO,GAAqB,IAAI,CAAC;QACvC,MAAM,KAAK,GAAG,OAAO,CAAC,kBAAkB,EAAE,CAAC;QAC3C,MAAM,YAAY,GAAG,IAAI,2BAAY,EAAE,CAAC;QACxC,YAAY,CAAC,GAAG,CACd,IAAI,2BAAY,CAAC,GAAG,EAAE;YACpB,OAAO,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACtC,CAAC,CAAC,CACH,CAAC;QACF,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC;QAC/C,OAAO,YAAY,CAAC;IACtB,CAAC;IAED,KAAK;QACH,MAAM,OAAO,GAAG,IAAI,CAAC;QACrB,MAAM,cAAc,GAAG,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC/C,mCAAmC;QACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,EAAE,CAAC,EAAE,EAAE;YACvC,CAAC,GAAG,EAAE;gBACJ,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACpD,mBAAmB;gBACnB,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,EAAE;oBAC9B,IAAA,kCAAmB,EAAC,YAAY,EAAE,OAAO,CAAC,CAAC;gBAC7C,CAAC,EAAE,KAAK,CAAC,CAAC;YACZ,CAAC,CAAC,EAAE,CAAC;SACN;IACH,CAAC;CACF;AAzCD,sCAyCC;AACD,IAAA,yBAAW,EAAC,aAAa,EAAE,CAAC,2CAAoB,CAAC,CAAC,CAAC","sourcesContent":["import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { observeNotification } from '../Notification';\n\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  logSubscribedFrame: () => number;\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[], scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    const subscription = new Subscription();\n    subscription.add(\n      new Subscription(() => {\n        subject.logUnsubscribedFrame(index);\n      })\n    );\n    subscription.add(super._subscribe(subscriber));\n    return subscription;\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (let i = 0; i < messagesLength; i++) {\n      (() => {\n        const { notification, frame } = subject.messages[i];\n        /* tslint:enable */\n        subject.scheduler.schedule(() => {\n          observeNotification(notification, subject);\n        }, frame);\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n"]}