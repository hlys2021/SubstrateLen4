{"version":3,"file":"WebSocketSubject.js","sourceRoot":"","sources":["../../../../../../../bak_node_modules/rxjs/src/internal/observable/dom/WebSocketSubject.ts"],"names":[],"mappings":"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","sourcesContent":["import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../types';\n\n/**\n * WebSocketSubjectConfig is a plain Object that allows us to make our\n * webSocket configurable.\n *\n * <span class=\"informal\">Provides flexibility to {@link webSocket}</span>\n *\n * It defines a set of properties to provide custom behavior in specific\n * moments of the socket's lifecycle. When the connection opens we can\n * use `openObserver`, when the connection is closed `closeObserver`, if we\n * are interested in listening for data coming from server: `deserializer`,\n * which allows us to customize the deserialization strategy of data before passing it\n * to the socket client. By default, `deserializer` is going to apply `JSON.parse` to each message coming\n * from the Server.\n *\n * ## Examples\n *\n * **deserializer**, the default for this property is `JSON.parse` but since there are just two options\n * for incoming data, either be text or binary data. We can apply a custom deserialization strategy\n * or just simply skip the default behaviour.\n *\n * ```ts\n * import { webSocket } from 'rxjs/webSocket';\n *\n * const wsSubject = webSocket({\n *   url: 'ws://localhost:8081',\n *   //Apply any transformation of your choice.\n *   deserializer: ({ data }) => data\n * });\n *\n * wsSubject.subscribe(console.log);\n *\n * // Let's suppose we have this on the Server: ws.send('This is a msg from the server')\n * //output\n * //\n * // This is a msg from the server\n * ```\n *\n * **serializer** allows us to apply custom serialization strategy but for the outgoing messages.\n *\n * ```ts\n * import { webSocket } from 'rxjs/webSocket';\n *\n * const wsSubject = webSocket({\n *   url: 'ws://localhost:8081',\n *   // Apply any transformation of your choice.\n *   serializer: msg => JSON.stringify({ channel: 'webDevelopment', msg: msg })\n * });\n *\n * wsSubject.subscribe(() => subject.next('msg to the server'));\n *\n * // Let's suppose we have this on the Server:\n * //   ws.on('message', msg => console.log);\n * //   ws.send('This is a msg from the server');\n * // output at server side:\n * //\n * // {\"channel\":\"webDevelopment\",\"msg\":\"msg to the server\"}\n * ```\n *\n * **closeObserver** allows us to set a custom error when an error raises up.\n *\n * ```ts\n * import { webSocket } from 'rxjs/webSocket';\n *\n * const wsSubject = webSocket({\n *   url: 'ws://localhost:8081',\n *   closeObserver: {\n *     next() {\n *       const customError = { code: 6666, reason: 'Custom evil reason' }\n *       console.log(`code: ${ customError.code }, reason: ${ customError.reason }`);\n *     }\n *   }\n * });\n *\n * // output\n * // code: 6666, reason: Custom evil reason\n * ```\n *\n * **openObserver**, Let's say we need to make some kind of init task before sending/receiving msgs to the\n * webSocket or sending notification that the connection was successful, this is when\n * openObserver is useful for.\n *\n * ```ts\n * import { webSocket } from 'rxjs/webSocket';\n *\n * const wsSubject = webSocket({\n *   url: 'ws://localhost:8081',\n *   openObserver: {\n *     next: () => {\n *       console.log('Connection ok');\n *     }\n *   }\n * });\n *\n * // output\n * // Connection ok\n * ```\n */\nexport interface WebSocketSubjectConfig<T> {\n  /** The url of the socket server to connect to */\n  url: string;\n  /** The protocol to use to connect */\n  protocol?: string | Array<string>;\n  /** @deprecated Will be removed in v8. Use {@link deserializer} instead. */\n  resultSelector?: (e: MessageEvent) => T;\n  /**\n   * A serializer used to create messages from passed values before the\n   * messages are sent to the server. Defaults to JSON.stringify.\n   */\n  serializer?: (value: T) => WebSocketMessage;\n  /**\n   * A deserializer used for messages arriving on the socket from the\n   * server. Defaults to JSON.parse.\n   */\n  deserializer?: (e: MessageEvent) => T;\n  /**\n   * An Observer that watches when open events occur on the underlying web socket.\n   */\n  openObserver?: NextObserver<Event>;\n  /**\n   * An Observer that watches when close events occur on the underlying web socket\n   */\n  closeObserver?: NextObserver<CloseEvent>;\n  /**\n   * An Observer that watches when a close is about to occur due to\n   * unsubscription.\n   */\n  closingObserver?: NextObserver<void>;\n  /**\n   * A WebSocket constructor to use. This is useful for situations like using a\n   * WebSocket impl in Node (WebSocket is a DOM API), or for mocking a WebSocket\n   * for testing purposes\n   */\n  WebSocketCtor?: { new (url: string, protocols?: string | string[]): WebSocket };\n  /** Sets the `binaryType` property of the underlying WebSocket. */\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\nconst DEFAULT_WEBSOCKET_CONFIG: WebSocketSubjectConfig<any> = {\n  url: '',\n  deserializer: (e: MessageEvent) => JSON.parse(e.data),\n  serializer: (value: any) => JSON.stringify(value),\n};\n\nconst WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT =\n  'WebSocketSubject.error must be called with an object with an error code, and an optional reason: { code: number, reason: string }';\n\nexport type WebSocketMessage = string | ArrayBuffer | Blob | ArrayBufferView;\n\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  private _config: WebSocketSubjectConfig<T>;\n\n  /** @internal */\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  _output: Subject<T>;\n\n  private _socket: WebSocket | null = null;\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig<T> | Observable<T>, destination?: Observer<T>) {\n    super();\n    if (urlConfigOrSource instanceof Observable) {\n      this.destination = destination;\n      this.source = urlConfigOrSource as Observable<T>;\n    } else {\n      const config = (this._config = { ...DEFAULT_WEBSOCKET_CONFIG });\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        config.url = urlConfigOrSource;\n      } else {\n        for (const key in urlConfigOrSource) {\n          if (urlConfigOrSource.hasOwnProperty(key)) {\n            (config as any)[key] = (urlConfigOrSource as any)[key];\n          }\n        }\n      }\n\n      if (!config.WebSocketCtor && WebSocket) {\n        config.WebSocketCtor = WebSocket;\n      } else if (!config.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this._config as WebSocketSubjectConfig<any>, this.destination as any);\n    sock.operator = operator;\n    sock.source = this;\n    return sock;\n  }\n\n  private _resetState() {\n    this._socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  /**\n   * Creates an {@link Observable}, that when subscribed to, sends a message,\n   * defined by the `subMsg` function, to the server over the socket to begin a\n   * subscription to data over that socket. Once data arrives, the\n   * `messageFilter` argument will be used to select the appropriate data for\n   * the resulting Observable. When finalization occurs, either due to\n   * unsubscription, completion, or error, a message defined by the `unsubMsg`\n   * argument will be sent to the server over the WebSocketSubject.\n   *\n   * @param subMsg A function to generate the subscription message to be sent to\n   * the server. This will still be processed by the serializer in the\n   * WebSocketSubject's config. (Which defaults to JSON serialization)\n   * @param unsubMsg A function to generate the unsubscription message to be\n   * sent to the server at finalization. This will still be processed by the\n   * serializer in the WebSocketSubject's config.\n   * @param messageFilter A predicate for selecting the appropriate messages\n   * from the server for the output stream.\n   */\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<T>) => {\n      try {\n        self.next(subMsg());\n      } catch (err) {\n        observer.error(err);\n      }\n\n      const subscription = self.subscribe({\n        next: (x) => {\n          try {\n            if (messageFilter(x)) {\n              observer.next(x);\n            }\n          } catch (err) {\n            observer.error(err);\n          }\n        },\n        error: (err) => observer.error(err),\n        complete: () => observer.complete(),\n      });\n\n      return () => {\n        try {\n          self.next(unsubMsg());\n        } catch (err) {\n          observer.error(err);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor, protocol, url, binaryType } = this._config;\n    const observer = this._output;\n\n    let socket: WebSocket | null = null;\n    try {\n      socket = protocol ? new WebSocketCtor!(url, protocol) : new WebSocketCtor!(url);\n      this._socket = socket;\n      if (binaryType) {\n        this._socket.binaryType = binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this._socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (evt: Event) => {\n      const { _socket } = this;\n      if (!_socket) {\n        socket!.close();\n        this._resetState();\n        return;\n      }\n      const { openObserver } = this._config;\n      if (openObserver) {\n        openObserver.next(evt);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create<T>(\n        (x) => {\n          if (socket!.readyState === 1) {\n            try {\n              const { serializer } = this._config;\n              socket!.send(serializer!(x!));\n            } catch (e) {\n              this.destination!.error(e);\n            }\n          }\n        },\n        (err) => {\n          const { closingObserver } = this._config;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (err && err.code) {\n            socket!.close(err.code, err.reason);\n          } else {\n            observer.error(new TypeError(WEBSOCKETSUBJECT_INVALID_ERROR_OBJECT));\n          }\n          this._resetState();\n        },\n        () => {\n          const { closingObserver } = this._config;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket!.close();\n          this._resetState();\n        }\n      ) as Subscriber<any>;\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((queue as ReplaySubject<T>).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      if (socket === this._socket) {\n        this._resetState();\n      }\n      const { closeObserver } = this._config;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      try {\n        const { deserializer } = this._config;\n        observer.next(deserializer!(e));\n      } catch (err) {\n        observer.error(err);\n      }\n    };\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this._socket) {\n      this._connectSocket();\n    }\n    this._output.subscribe(subscriber);\n    subscriber.add(() => {\n      const { _socket } = this;\n      if (this._output.observers.length === 0) {\n        if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n          _socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscriber;\n  }\n\n  unsubscribe() {\n    const { _socket } = this;\n    if (_socket && (_socket.readyState === 1 || _socket.readyState === 0)) {\n      _socket.close();\n    }\n    this._resetState();\n    super.unsubscribe();\n  }\n}\n"]}