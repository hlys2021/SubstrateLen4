{"version":3,"file":"bindCallbackInternals.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/rxjs/src/internal/observable/bindCallbackInternals.ts"],"names":[],"mappings":"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","sourcesContent":["import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { observeOn } from '../operators/observeOn';\nimport { AsyncSubject } from '../AsyncSubject';\n\nexport function bindCallbackInternals(\n  isNodeStyle: boolean,\n  callbackFunc: any,\n  resultSelector?: any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<unknown> {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      // The user provided a result selector.\n      return function (this: any, ...args: any[]) {\n        return (bindCallbackInternals(isNodeStyle, callbackFunc, scheduler) as any)\n          .apply(this, args)\n          .pipe(mapOneOrManyArgs(resultSelector as any));\n      };\n    }\n  }\n\n  // If a scheduler was passed, use our `subscribeOn` and `observeOn` operators\n  // to compose that behavior for the user.\n  if (scheduler) {\n    return function (this: any, ...args: any[]) {\n      return (bindCallbackInternals(isNodeStyle, callbackFunc) as any)\n        .apply(this, args)\n        .pipe(subscribeOn(scheduler!), observeOn(scheduler!));\n    };\n  }\n\n  return function (this: any, ...args: any[]): Observable<any> {\n    // We're using AsyncSubject, because it emits when it completes,\n    // and it will play the value to all late-arriving subscribers.\n    const subject = new AsyncSubject<any>();\n\n    // If this is true, then we haven't called our function yet.\n    let uninitialized = true;\n    return new Observable((subscriber) => {\n      // Add our subscriber to the subject.\n      const subs = subject.subscribe(subscriber);\n\n      if (uninitialized) {\n        uninitialized = false;\n        // We're going to execute the bound function\n        // This bit is to signal that we are hitting the callback asynchronously.\n        // Because we don't have any anti-\"Zalgo\" guarantees with whatever\n        // function we are handed, we use this bit to figure out whether or not\n        // we are getting hit in a callback synchronously during our call.\n        let isAsync = false;\n\n        // This is used to signal that the callback completed synchronously.\n        let isComplete = false;\n\n        // Call our function that has a callback. If at any time during this\n        // call, an error is thrown, it will be caught by the Observable\n        // subscription process and sent to the consumer.\n        callbackFunc.apply(\n          // Pass the appropriate `this` context.\n          this,\n          [\n            // Pass the arguments.\n            ...args,\n            // And our callback handler.\n            (...results: any[]) => {\n              if (isNodeStyle) {\n                // If this is a node callback, shift the first value off of the\n                // results and check it, as it is the error argument. By shifting,\n                // we leave only the argument(s) we want to pass to the consumer.\n                const err = results.shift();\n                if (err != null) {\n                  subject.error(err);\n                  // If we've errored, we can stop processing this function\n                  // as there's nothing else to do. Just return to escape.\n                  return;\n                }\n              }\n              // If we have one argument, notify the consumer\n              // of it as a single value, otherwise, if there's more than one, pass\n              // them as an array. Note that if there are no arguments, `undefined`\n              // will be emitted.\n              subject.next(1 < results.length ? results : results[0]);\n              // Flip this flag, so we know we can complete it in the synchronous\n              // case below.\n              isComplete = true;\n              // If we're not asynchronous, we need to defer the `complete` call\n              // until after the call to the function is over. This is because an\n              // error could be thrown in the function after it calls our callback,\n              // and if that is the case, if we complete here, we are unable to notify\n              // the consumer than an error occurred.\n              if (isAsync) {\n                subject.complete();\n              }\n            },\n          ]\n        );\n        // If we flipped `isComplete` during the call, we resolved synchronously,\n        // notify complete, because we skipped it in the callback to wait\n        // to make sure there were no errors during the call.\n        if (isComplete) {\n          subject.complete();\n        }\n\n        // We're no longer synchronous. If the callback is called at this point\n        // we can notify complete on the spot.\n        isAsync = true;\n      }\n\n      // Return the subscription from adding our subscriber to the subject.\n      return subs;\n    });\n  };\n}\n"]}