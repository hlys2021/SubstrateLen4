{"version":3,"file":"eth.tests.js","sourceRoot":"","sources":["../../../../../bak_node_modules/web3-eth/types/tests/eth.tests.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file eth-tests.ts\n * @author Josh Stevens <joshstevens19@hotmail.co.uk>\n * @author Prince Sinha <sinhaprince013@gmail.com>\n * @date 2018\n */\n\nimport {Log} from 'web3-core';\nimport EthDefault, {\n    BlockTransactionObject,\n    BlockTransactionString,\n    BlockHeader,\n    Eth,\n    GetProof,\n    Syncing,\n    RLPEncodedTransaction,\n    Transaction,\n    TransactionReceipt,\n    TransactionConfig,\n    hardfork,\n    Common,\n    chain,\n    FeeHistoryResult\n} from 'web3-eth';\nimport BN = require('bn.js');\nimport BigNumber from 'bignumber.js';\n\n// $ExpectType Eth\nconst eth_default_empty = new EthDefault();\n\n// $ExpectType Eth\nconst eth_empty = new Eth();\n\n// $ExpectType Eth\nconst eth = new Eth('http://localhost:8545');\n\n// $ExpectType provider\neth.currentProvider;\n\n// $ExpectType any\neth.givenProvider;\n\n// $ExpectType string | null\neth.defaultAccount;\n\n// $ExpectType BlockNumber\neth.defaultBlock;\n\n// $ExpectType Common\neth.defaultCommon;\n\n// $ExpectType hardfork\neth.defaultHardfork;\n\n// $ExpectType chain\neth.defaultChain;\n\n// $ExpectType number\neth.transactionPollingTimeout;\n\n// $ExpectType number\neth.transactionConfirmationBlocks;\n\n// $ExpectType number\neth.transactionBlockTimeout;\n\n// $ExpectType boolean\neth.handleRevert;\n\n// $ExpectType new (jsonInterface: AbiItem | AbiItem[], address?: string | undefined, options?: ContractOptions | undefined) => Contract\neth.Contract;\n\n// $ExpectType new (iban: string) => Iban\neth.Iban;\n\n// $ExpectType Personal\neth.personal;\n\n// $ExpectType Accounts\neth.accounts;\n\n// $ExpectType any\neth.extend({property: 'test', methods: [{name: 'method', call: 'method'}]});\n\n// $ExpectType Ens\neth.ens;\n\n// $ExpectType AbiCoder\neth.abi;\n\n// $ExpectType Network\neth.net;\n\n// $ExpectType void\neth.clearSubscriptions(() => {});\n\n// $ExpectType Subscription<Log>\neth.subscribe('logs', {});\n// $ExpectType Subscription<Log>\neth.subscribe('logs', {}, (error: Error, log: Log) => {});\n\n// $ExpectType Subscription<Syncing>\neth.subscribe('syncing');\n// $ExpectType Subscription<Syncing>\neth.subscribe(\n    'syncing',\n    (error: Error, result: Syncing) => {}\n);\n\n// $ExpectType Subscription<BlockHeader>\neth.subscribe('newBlockHeaders');\n// $ExpectType Subscription<BlockHeader>\neth.subscribe(\n    'newBlockHeaders',\n    (error: Error, blockHeader: BlockHeader) => {}\n);\n\n// $ExpectType Subscription<string>\neth.subscribe('pendingTransactions');\n// $ExpectType Subscription<string>\neth.subscribe(\n    'pendingTransactions',\n    (error: Error, transactionHash: string) => {}\n);\n\n// $ExpectType boolean\neth.setProvider('https://localhost:2100');\n\n// $ExpectType BatchRequest\nnew eth.BatchRequest();\n\n// $ExpectType Promise<string>\neth.getProtocolVersion();\n// $ExpectType Promise<string>\neth.getProtocolVersion((error: Error, protocolVersion: string) => {});\n\n// $ExpectType Promise<boolean | Syncing>\neth.isSyncing();\n// $ExpectType Promise<boolean | Syncing>\neth.isSyncing((error: Error, syncing: Syncing) => {});\n\n// $ExpectType Promise<string>\neth.getCoinbase();\n// $ExpectType Promise<string>\neth.getCoinbase((error: Error, coinbaseAddress: string) => {});\n\n// $ExpectType Promise<boolean>\neth.isMining();\n// $ExpectType Promise<boolean>\neth.isMining((error: Error, mining: boolean) => {});\n\n// $ExpectType Promise<number>\neth.getHashrate();\n// $ExpectType Promise<number>\neth.getHashrate((error: Error, hashes: number) => {});\n\n// $ExpectType Promise<string>\neth.getNodeInfo();\n// $ExpectType Promise<string>\neth.getNodeInfo((error: Error, version: string) => {});\n\n// $ExpectType Promise<number>\neth.getChainId();\n// $ExpectType Promise<number>\neth.getChainId((error: Error, chainId: number) => {});\n\n// $ExpectType Promise<string>\neth.getGasPrice();\n// $ExpectType Promise<string>\neth.getGasPrice((error: Error, gasPrice: string) => {});\n\n// $ExpectType Promise<FeeHistoryResult>\neth.getFeeHistory(\n    4, \"0xA30953\", []\n);\n// $ExpectType Promise<FeeHistoryResult>\neth.getFeeHistory(\n    4, \"0xA30953\", [],\n    (error: Error, feeHistory: FeeHistoryResult) => {});\n\n// $ExpectType Promise<string[]>\neth.getAccounts();\n// $ExpectType Promise<string[]>\neth.getAccounts((error: Error, accounts: string[]) => {});\n\n// $ExpectType Promise<number>\neth.getBlockNumber();\n// $ExpectType Promise<number>\neth.getBlockNumber((error: Error, blockNumber: number) => {});\n\n// $ExpectType Promise<string>\neth.getBalance('0x407d73d8a49eeb85d32cf465507dd71d507100c1');\n// $ExpectType Promise<string>\neth.getBalance('0x407d73d8a49eeb85d32cf465507dd71d507100c1', '1000');\n// $ExpectType Promise<string>\neth.getBalance(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    '1000',\n    (error: Error, balance: string) => {}\n);\n// $ExpectType Promise<string>\neth.getBalance('0x407d73d8a49eeb85d32cf465507dd71d507100c1', 1000);\n// $ExpectType Promise<string>\neth.getBalance(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    1000,\n    (error: Error, balance: string) => {}\n);\n\n// $ExpectType Promise<string>\neth.getStorageAt('0x407d73d8a49eeb85d32cf465507dd71d507100c1', 2);\n// $ExpectType Promise<string>\neth.getStorageAt('0x407d73d8a49eeb85d32cf465507dd71d507100c1', new BN(2));\n// $ExpectType Promise<string>\neth.getStorageAt('0x407d73d8a49eeb85d32cf465507dd71d507100c1', new BigNumber(2));\n// $ExpectType Promise<string>\neth.getStorageAt('0x407d73d8a49eeb85d32cf465507dd71d507100c1', 2, '1000');\n// $ExpectType Promise<string>\neth.getStorageAt(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    2,\n    '1000',\n    (error: Error, balance: string) => {}\n);\n// $ExpectType Promise<string>\neth.getStorageAt('0x407d73d8a49eeb85d32cf465507dd71d507100c1', 2, 1000);\n// $ExpectType Promise<string>\neth.getStorageAt(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    2,\n    1000,\n    (error: Error, balance: string) => {}\n);\n\n// $ExpectType Promise<string>\neth.getCode('0x407d73d8a49eeb85d32cf465507dd71d507100c1');\n// $ExpectType Promise<string>\neth.getCode('0x407d73d8a49eeb85d32cf465507dd71d507100c1', '1000');\n// $ExpectType Promise<string>\neth.getCode(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    '1000',\n    (error: Error, balance: string) => {}\n);\n// $ExpectType Promise<string>\neth.getCode('0x407d73d8a49eeb85d32cf465507dd71d507100c1', 1000);\n// $ExpectType Promise<string>\neth.getCode(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    1000,\n    (error: Error, balance: string) => {}\n);\n\n// $ExpectType Promise<BlockTransactionString>\neth.getBlock('0x407d73d8a49eeb85d32cf465507dd71d507100c1');\n// $ExpectType Promise<BlockTransactionString>\neth.getBlock(345);\n// $ExpectType Promise<BlockTransactionObject>\neth.getBlock('0x407d73d8a49eeb85d32cf465507dd71d507100c1', true);\n// $ExpectType Promise<BlockTransactionString>\neth.getBlock(345);\n// $ExpectType Promise<BlockTransactionObject>\neth.getBlock(345, true);\n// $ExpectType Promise<BlockTransactionString>\neth.getBlock(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    (error: Error, block: BlockTransactionString) => {}\n);\n// $ExpectType Promise<BlockTransactionString>\neth.getBlock(345, (error: Error, block: BlockTransactionString) => {});\n// $ExpectType Promise<BlockTransactionObject>\neth.getBlock(345, true, (error: Error, block: BlockTransactionObject) => {});\n// $ExpectType Promise<BlockTransactionObject>\neth.getBlock(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    true,\n    (error: Error, block: BlockTransactionObject) => {}\n);\n\n// $ExpectType Promise<number>\neth.getBlockTransactionCount(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    (error: Error, numberOfTransactions: number) => {}\n);\n// $ExpectType Promise<number>\neth.getBlockTransactionCount(345);\n// $ExpectType Promise<number>\neth.getBlockTransactionCount(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    (error: Error, numberOfTransactions: number) => {}\n);\n// $ExpectType Promise<number>\neth.getBlockTransactionCount(345);\n\n// $ExpectType Promise<BlockTransactionString>\neth.getUncle('0x407d73d8a49eeb85d32cf465507dd71d507100c1', 4);\n// $ExpectType Promise<BlockTransactionString>\neth.getUncle(345, 4);\n// $ExpectType Promise<BlockTransactionObject>\neth.getUncle('0x407d73d8a49eeb85d32cf465507dd71d507100c1', 4, true);\n// $ExpectType Promise<BlockTransactionString>\neth.getUncle(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    4,\n    (error: Error, uncle: {}) => {}\n);\n// $ExpectType Promise<BlockTransactionString>\neth.getUncle(345, 4, (error: Error, uncle: {}) => {});\n// $ExpectType Promise<BlockTransactionObject>\neth.getUncle(345, 4, true);\n// $ExpectType Promise<BlockTransactionObject>\neth.getUncle(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    4,\n    true,\n    (error: Error, uncle: {}) => {}\n);\n// $ExpectType Promise<BlockTransactionObject>\neth.getUncle(345, 4, true, (error: Error, uncle: {}) => {});\n\n// $ExpectType Promise<Transaction>\neth.getTransaction('0x407d73d8a49eeb85d32cf465507dd71d507100c1');\n// $ExpectType Promise<Transaction>\neth.getTransaction(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    (error: Error, transaction: Transaction) => {}\n);\n\n// $ExpectType Promise<Transaction>\neth.getTransactionFromBlock('0x407d73d8a49eeb85d32cf465507dd71d507100c1', 2);\n// $ExpectType Promise<Transaction>\neth.getTransactionFromBlock(345, 2);\n// $ExpectType Promise<Transaction>\neth.getTransactionFromBlock(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    2,\n    (error: Error, transaction: Transaction) => {}\n);\n// $ExpectType Promise<Transaction>\neth.getTransactionFromBlock(\n    345,\n    2,\n    (error: Error, transaction: Transaction) => {}\n);\n\n// $ExpectType Promise<TransactionReceipt>\neth.getTransactionReceipt('0x407d73d8a49eeb85d32cf465507dd71d507100c1');\n// $ExpectType Promise<TransactionReceipt>\neth.getTransactionReceipt(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    (error: Error, transactionReceipt: TransactionReceipt) => {}\n);\n\n// $ExpectType Promise<number>\neth.getTransactionCount('0x407d73d8a49eeb85d32cf465507dd71d507100c1');\n// $ExpectType Promise<number>\neth.getTransactionCount('0x407d73d8a49eeb85d32cf465507dd71d507100c1', 1000);\n// $ExpectType Promise<number>\neth.getTransactionCount('0x407d73d8a49eeb85d32cf465507dd71d507100c1', '1000');\n// $ExpectType Promise<number>\neth.getTransactionCount(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    (error: Error, count: number) => {}\n);\n// $ExpectType Promise<number>\neth.getTransactionCount(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    (error: Error, count: number) => {}\n);\n// $ExpectType Promise<number>\neth.getTransactionCount(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    1000,\n    (error: Error, count: number) => {}\n);\n// $ExpectType Promise<number>\neth.getTransactionCount(\n    '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n    '1000',\n    (error: Error, count: number) => {}\n);\n\nconst code = '603d80600c6000396000f3007c0';\n\n// $ExpectType PromiEvent<TransactionReceipt>\neth.sendTransaction({\n    from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe',\n    data: 'code'\n});\n// $ExpectType PromiEvent<TransactionReceipt>\neth.sendTransaction(\n    {\n        from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe',\n        data: 'code'\n    },\n    (error: Error, hash: string) => {}\n);\n\n// $ExpectType PromiEvent<TransactionReceipt>\neth.sendSignedTransaction('0xf889808609184e72a0008227109');\n// $ExpectType PromiEvent<TransactionReceipt>\neth.sendSignedTransaction(\n    '0xf889808609184e72a0008227109',\n    (error: Error, hash: string) => {}\n);\n\n// $ExpectType Promise<string>\neth.sign('Hello world', '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe');\n// $ExpectType Promise<string>\neth.sign('Hello world', 3);\n// $ExpectType Promise<string>\neth.sign(\n    'Hello world',\n    '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n    (error: Error, signature: string) => {}\n);\n// $ExpectType Promise<string>\neth.sign('Hello world', 3, (error: Error, signature: string) => {});\n\n// $ExpectType Promise<RLPEncodedTransaction>\neth.signTransaction({\n    from: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n    gasPrice: '20000000000',\n    gas: '21000',\n    to: '0x3535353535353535353535353535353535353535',\n    value: '1000000000000000000',\n    data: ''\n});\n// $ExpectType Promise<RLPEncodedTransaction>\neth.signTransaction(\n    {\n        from: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n        gasPrice: '20000000000',\n        gas: '21000',\n        to: '0x3535353535353535353535353535353535353535',\n        value: '1000000000000000000',\n        data: ''\n    },\n    '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0'\n);\n// $ExpectType Promise<RLPEncodedTransaction>\neth.signTransaction(\n    {\n        from: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n        gasPrice: '20000000000',\n        gas: '21000',\n        to: '0x3535353535353535353535353535353535353535',\n        value: '1000000000000000000',\n        data: ''\n    },\n    (error: Error, signedTransaction: RLPEncodedTransaction) => {}\n);\n// $ExpectType Promise<RLPEncodedTransaction>\neth.signTransaction(\n    {\n        from: '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n        gasPrice: '20000000000',\n        gas: '21000',\n        to: '0x3535353535353535353535353535353535353535',\n        value: '1000000000000000000',\n        data: ''\n    },\n    '0xEB014f8c8B418Db6b45774c326A0E64C78914dC0',\n    (error: Error, signedTransaction: RLPEncodedTransaction) => {}\n);\n\n// $ExpectType Promise<string>\neth.call({\n    to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe', // contract address\n    data:\n        '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n});\n// $ExpectType Promise<string>\neth.call(\n    {\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe', // contract address\n        data:\n            '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n    },\n    100\n);\n// $ExpectType Promise<string>\neth.call(\n    {\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe', // contract address\n        data:\n            '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n    },\n    '100'\n);\n// $ExpectType Promise<string>\neth.call(\n    {\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe', // contract address\n        data:\n            '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n    },\n    (error: Error, data: string) => {}\n);\n// $ExpectType Promise<string>\neth.call(\n    {\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe', // contract address\n        data:\n            '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n    },\n    '100',\n    (error: Error, data: string) => {}\n);\n// $ExpectType Promise<string>\neth.call(\n    {\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe', // contract address\n        data:\n            '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n    },\n    100,\n    (error: Error, data: string) => {}\n);\n\n// $ExpectType Promise<string>\neth.call(\n    {\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe', // contract address\n        data:\n            '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n    },\n    100,\n    (error: Error, data: string) => {}\n);\n\n// $ExpectType Promise<number>\neth.estimateGas({\n    to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n    data:\n        '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n});\n// $ExpectType Promise<number>\neth.estimateGas(\n    {\n        to: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        data:\n            '0xc6888fa10000000000000000000000000000000000000000000000000000000000000003'\n    },\n    (error: Error, gas: number) => {}\n);\n\n// $ExpectType Promise<Log[]>\neth.getPastLogs({\n    address: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n    topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']\n});\n// $ExpectType Promise<Log[]>\neth.getPastLogs(\n    {\n        address: '0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe',\n        topics: [\n            '0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234'\n        ]\n    },\n    (error: Error, logs: Log[]) => {}\n);\n\n// $ExpectType Promise<string[]>\neth.getWork();\n// $ExpectType Promise<string[]>\neth.getWork((error: Error, result: string[]) => {});\n\n// $ExpectType Promise<boolean>\neth.submitWork([\n    '0x0000000000000001',\n    '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',\n    '0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000'\n]);\n\n// $ExpectType Promise<boolean>\neth.submitWork(\n    [\n        '0x0000000000000001',\n        '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef',\n        '0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000'\n    ],\n    (error: Error, result: boolean) => {}\n);\n\n// $ExpectType Promise<Transaction[]>\neth.getPendingTransactions();\n\n// $ExpectType Promise<Transaction[]>\neth.getPendingTransactions((error: Error, result: Transaction[]) => {});\n\n// $ExpectType Promise<GetProof>\neth.getProof(\n    '0x1234567890123456789012345678901234567890',\n    [\n        '0x0000000000000000000000000000000000000000000000000000000000000000',\n        '0x0000000000000000000000000000000000000000000000000000000000000001'\n    ],\n    'latest'\n);\n\n// $ExpectType Promise<GetProof>\neth.getProof(\n    '0x1234567890123456789012345678901234567890',\n    [\n        '0x0000000000000000000000000000000000000000000000000000000000000000',\n        '0x0000000000000000000000000000000000000000000000000000000000000001'\n    ],\n    'latest',\n    (error: Error, result: GetProof) => {}\n);\n\n// $ExpectType Promise<GetProof>\neth.getProof(\n    '0x1234567890123456789012345678901234567890',\n    [\n        '0x0000000000000000000000000000000000000000000000000000000000000000',\n        '0x0000000000000000000000000000000000000000000000000000000000000001'\n    ],\n    10\n);\n\n// $ExpectType Promise<GetProof>\neth.getProof(\n    '0x1234567890123456789012345678901234567890',\n    [\n        '0x0000000000000000000000000000000000000000000000000000000000000000',\n        '0x0000000000000000000000000000000000000000000000000000000000000001'\n    ],\n    10,\n    (error: Error, result: GetProof) => {}\n);\n"]}