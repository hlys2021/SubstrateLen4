{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../bak_node_modules/@ethereumjs/common/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\nimport { buf as crc32Buffer } from 'crc-32'\nimport { BN, BNLike, toType, TypeOutput, intToBuffer } from 'ethereumjs-util'\nimport { _getInitializedChains } from './chains'\nimport { hardforks as HARDFORK_CHANGES } from './hardforks'\nimport { EIPs } from './eips'\nimport {\n  BootstrapNode,\n  Chain as IChain,\n  GenesisBlock,\n  GenesisState,\n  Hardfork as HardforkParams,\n} from './types'\n\nexport enum CustomChain {\n  /**\n   * Polygon (Matic) Mainnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMainnet = 'polygon-mainnet',\n\n  /**\n   * Polygon (Matic) Mumbai Testnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMumbai = 'polygon-mumbai',\n\n  /**\n   * Arbitrum Rinkeby Testnet\n   *\n   * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n   */\n  ArbitrumRinkebyTestnet = 'arbitrum-rinkeby-testnet',\n\n  /**\n   * xDai EVM sidechain with a native stable token\n   *\n   * - [Documentation](https://www.xdaichain.com/)\n   */\n  xDaiChain = 'x-dai-chain',\n}\n\nexport enum Chain {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Kovan = 42,\n  Goerli = 5,\n}\n\nexport enum Hardfork {\n  Chainstart = 'chainstart',\n  Homestead = 'homestead',\n  Dao = 'dao',\n  TangerineWhistle = 'tangerineWhistle',\n  SpuriousDragon = 'spuriousDragon',\n  Byzantium = 'byzantium',\n  Constantinople = 'constantinople',\n  Petersburg = 'petersburg',\n  Istanbul = 'istanbul',\n  MuirGlacier = 'muirGlacier',\n  Berlin = 'berlin',\n  London = 'london',\n  Shanghai = 'shanghai',\n  Merge = 'merge',\n}\n\nexport enum ConsensusType {\n  ProofOfStake = 'pos',\n  ProofOfWork = 'pow',\n  ProofOfAuthority = 'poa',\n}\n\nexport enum ConsensusAlgorithm {\n  Ethash = 'ethash',\n  Clique = 'clique',\n  Casper = 'casper',\n}\n\ninterface BaseOpts {\n  /**\n   * String identifier ('byzantium') for hardfork or {@link Hardfork} enum.\n   *\n   * Default: Hardfork.Istanbul\n   */\n  hardfork?: string | Hardfork\n  /**\n   * Limit parameter returns to the given hardforks\n   */\n  supportedHardforks?: Array<string | Hardfork>\n  /**\n   * Selected EIPs which can be activated, please use an array for instantiation\n   * (e.g. `eips: [ 2537, ]`)\n   *\n   * Currently supported:\n   *\n   * - [EIP-2537](https://eips.ethereum.org/EIPS/eip-2537) - BLS12-381 precompiles\n   */\n  eips?: number[]\n}\n\n/**\n * Options for instantiating a {@link Common} instance.\n */\nexport interface CommonOpts extends BaseOpts {\n  /**\n   * Chain name ('mainnet'), id (1), or {@link Chain} enum,\n   * either from a chain directly supported or a custom chain\n   * passed in via {@link CommonOpts.customChains}.\n   */\n  chain: string | number | Chain | BN | object\n  /**\n   * Initialize (in addition to the supported chains) with the selected\n   * custom chains\n   *\n   * Usage (directly with the respective chain intialization via the {@link CommonOpts.chain} option):\n   *\n   * Pattern 1 (without genesis state):\n   *\n   * ```javascript\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ myCustomChain1 ]})\n   * ```\n   *\n   * Pattern 2 (with genesis state, see {@link CommonOpts.genesisState} for format):\n   *\n   * ```javascript\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * import chain1GenesisState from '[PATH_TO_GENESIS_STATES]/chain1GenesisState.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ [ myCustomChain1, chain1GenesisState ] ]})\n   * ```\n   */\n  customChains?: IChain[] | [IChain, GenesisState][]\n}\n\n/**\n * Options to be used with the {@link Common.custom} static constructor.\n */\nexport interface CustomCommonOpts extends BaseOpts {\n  /**\n   * The name (`mainnet`), id (`1`), or {@link Chain} enum of\n   * a standard chain used to base the custom chain params on.\n   */\n  baseChain?: string | number | Chain | BN\n}\n\ninterface hardforkOptions {\n  /** optional, only allow supported HFs (default: false) */\n  onlySupported?: boolean\n  /** optional, only active HFs (default: false) */\n  onlyActive?: boolean\n}\n\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport default class Common extends EventEmitter {\n  readonly DEFAULT_HARDFORK: string | Hardfork\n\n  private _chainParams: IChain\n  private _hardfork: string | Hardfork\n  private _supportedHardforks: Array<string | Hardfork> = []\n  private _eips: number[] = []\n  private _customChains: IChain[] | [IChain, GenesisState][]\n\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `@ethereumjs/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n  static custom(\n    chainParamsOrName: Partial<IChain> | CustomChain,\n    opts: CustomCommonOpts = {}\n  ): Common {\n    const baseChain = opts.baseChain ?? 'mainnet'\n    const standardChainParams = { ...Common._getChainParams(baseChain) }\n    standardChainParams['name'] = 'custom-chain'\n\n    if (typeof chainParamsOrName !== 'string') {\n      return new Common({\n        chain: {\n          ...standardChainParams,\n          ...chainParamsOrName,\n        },\n        ...opts,\n      })\n    } else {\n      if (chainParamsOrName === CustomChain.PolygonMainnet) {\n        return Common.custom({\n          name: CustomChain.PolygonMainnet,\n          chainId: 137,\n          networkId: 137,\n        })\n      }\n      if (chainParamsOrName === CustomChain.PolygonMumbai) {\n        return Common.custom({\n          name: CustomChain.PolygonMumbai,\n          chainId: 80001,\n          networkId: 80001,\n        })\n      }\n      if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n        return Common.custom({\n          name: CustomChain.ArbitrumRinkebyTestnet,\n          chainId: 421611,\n          networkId: 421611,\n        })\n      }\n      if (chainParamsOrName === CustomChain.xDaiChain) {\n        return Common.custom({\n          name: CustomChain.xDaiChain,\n          chainId: 100,\n          networkId: 100,\n        })\n      }\n\n      throw new Error(`Custom chain ${chainParamsOrName} not supported`)\n    }\n  }\n\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one. It uses all the `Chain`\n   * params from {@link baseChain} except the ones overridden in {@link customChainParams}.\n   *\n   * @deprecated Use {@link Common.custom} instead\n   *\n   * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n   * chain params on.\n   * @param customChainParams The custom parameters of the chain.\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n   */\n  static forCustomChain(\n    baseChain: string | number | Chain,\n    customChainParams: Partial<IChain>,\n    hardfork?: string | Hardfork,\n    supportedHardforks?: Array<string | Hardfork>\n  ): Common {\n    const standardChainParams = Common._getChainParams(baseChain)\n\n    return new Common({\n      chain: {\n        ...standardChainParams,\n        ...customChainParams,\n      },\n      hardfork: hardfork,\n      supportedHardforks: supportedHardforks,\n    })\n  }\n\n  /**\n   * Static method to determine if a {@link chainId} is supported as a standard chain\n   * @param chainId BN id (`1`) of a standard chain\n   * @returns boolean\n   */\n  static isSupportedChainId(chainId: BN): boolean {\n    const initializedChains: any = _getInitializedChains()\n    return Boolean(initializedChains['names'][chainId.toString()])\n  }\n\n  private static _getChainParams(\n    chain: string | number | Chain | BN,\n    customChains?: IChain[]\n  ): IChain {\n    const initializedChains: any = _getInitializedChains(customChains)\n    if (typeof chain === 'number' || BN.isBN(chain)) {\n      chain = chain.toString()\n\n      if (initializedChains['names'][chain]) {\n        const name: string = initializedChains['names'][chain]\n        return initializedChains[name]\n      }\n\n      throw new Error(`Chain with ID ${chain} not supported`)\n    }\n\n    if (initializedChains[chain]) {\n      return initializedChains[chain]\n    }\n\n    throw new Error(`Chain with name ${chain} not supported`)\n  }\n\n  /**\n   *\n   * @constructor\n   */\n  constructor(opts: CommonOpts) {\n    super()\n    this._customChains = opts.customChains ?? []\n    this._chainParams = this.setChain(opts.chain)\n    this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Istanbul\n    for (const hf of this._chainParams.hardforks) {\n      if (!hf.forkHash) {\n        hf.forkHash = this._calcForkHash(hf.name)\n      }\n    }\n    this._hardfork = this.DEFAULT_HARDFORK\n    if (opts.supportedHardforks) {\n      this._supportedHardforks = opts.supportedHardforks\n    }\n    if (opts.hardfork) {\n      this.setHardfork(opts.hardfork)\n    }\n    if (opts.eips) {\n      this.setEIPs(opts.eips)\n    }\n  }\n\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain\n   *     representation. Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n  setChain(chain: string | number | Chain | BN | object): any {\n    if (typeof chain === 'number' || typeof chain === 'string' || BN.isBN(chain)) {\n      // Filter out genesis states if passed in to customChains\n      let plainCustomChains: IChain[]\n      if (\n        this._customChains &&\n        this._customChains.length > 0 &&\n        Array.isArray(this._customChains[0])\n      ) {\n        plainCustomChains = (this._customChains as [IChain, GenesisState][]).map((e) => e[0])\n      } else {\n        plainCustomChains = this._customChains as IChain[]\n      }\n      this._chainParams = Common._getChainParams(chain, plainCustomChains)\n    } else if (typeof chain === 'object') {\n      if (this._customChains.length > 0) {\n        throw new Error(\n          'Chain must be a string, number, or BN when initialized with customChains passed in'\n        )\n      }\n      const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes']\n      for (const param of required) {\n        if ((<any>chain)[param] === undefined) {\n          throw new Error(`Missing required chain parameter: ${param}`)\n        }\n      }\n      this._chainParams = chain as IChain\n    } else {\n      throw new Error('Wrong input format')\n    }\n    return this._chainParams\n  }\n\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n   */\n  setHardfork(hardfork: string | Hardfork): void {\n    if (!this._isSupportedHardfork(hardfork)) {\n      throw new Error(`Hardfork ${hardfork} not set as supported in supportedHardforks`)\n    }\n    let existing = false\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if (hfChanges[0] === hardfork) {\n        if (this._hardfork !== hardfork) {\n          this._hardfork = hardfork\n          this.emit('hardforkChanged', hardfork)\n        }\n        existing = true\n      }\n    }\n    if (!existing) {\n      throw new Error(`Hardfork with name ${hardfork} not supported`)\n    }\n  }\n\n  /**\n   * Returns the hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF\n   */\n  getHardforkByBlockNumber(blockNumber: BNLike, td?: BNLike): string {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    td = td ? toType(td, TypeOutput.BN) : undefined\n\n    let hardfork = Hardfork.Chainstart\n    let minTdHF\n    let maxTdHF\n    let previousHF\n    for (const hf of this.hardforks()) {\n      // Skip comparison for not applied HFs\n      if (hf.block === null) {\n        if (td && hf.td) {\n          if (td.gten(hf.td)) {\n            return hf.name\n          }\n        }\n        continue\n      }\n      if (blockNumber.gte(new BN(hf.block))) {\n        hardfork = hf.name as Hardfork\n      }\n      if (td && hf.td) {\n        if (td.gten(hf.td)) {\n          minTdHF = hf.name\n        } else {\n          maxTdHF = previousHF\n        }\n      }\n      previousHF = hf.name\n    }\n    if (td) {\n      let msgAdd = `block number: ${blockNumber} (-> ${hardfork}), `\n      if (minTdHF) {\n        if (!this.hardforkGteHardfork(hardfork, minTdHF)) {\n          const msg = 'HF determined by block number is lower than the minimum total difficulty HF'\n          msgAdd += `total difficulty: ${td} (-> ${minTdHF})`\n          throw new Error(`${msg}: ${msgAdd}`)\n        }\n      }\n      if (maxTdHF) {\n        if (!this.hardforkGteHardfork(maxTdHF, hardfork)) {\n          const msg = 'Maximum HF determined by total difficulty is lower than the block number HF'\n          msgAdd += `total difficulty: ${td} (-> ${maxTdHF})`\n          throw new Error(`${msg}: ${msgAdd}`)\n        }\n      }\n    }\n    return hardfork\n  }\n\n  /**\n   * Sets a new hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF set\n   */\n  setHardforkByBlockNumber(blockNumber: BNLike, td?: BNLike): string {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td)\n    this.setHardfork(hardfork)\n    return hardfork\n  }\n\n  /**\n   * Internal helper function to choose between hardfork set and hardfork provided as param\n   * @param hardfork Hardfork given to function as a parameter\n   * @returns Hardfork chosen to be used\n   */\n  _chooseHardfork(hardfork?: string | Hardfork | null, onlySupported: boolean = true): string {\n    if (!hardfork) {\n      hardfork = this._hardfork\n    } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n      throw new Error(`Hardfork ${hardfork} not set as supported in supportedHardforks`)\n    }\n    return hardfork\n  }\n\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params\n   */\n  _getHardfork(hardfork: string | Hardfork): any {\n    const hfs = this.hardforks()\n    for (const hf of hfs) {\n      if (hf['name'] === hardfork) return hf\n    }\n    throw new Error(`Hardfork ${hardfork} not defined for chain ${this.chainName()}`)\n  }\n\n  /**\n   * Internal helper function to check if a hardfork is set to be supported by the library\n   * @param hardfork Hardfork name\n   * @returns True if hardfork is supported\n   */\n  _isSupportedHardfork(hardfork: string | Hardfork | null): boolean {\n    if (this._supportedHardforks.length > 0) {\n      for (const supportedHf of this._supportedHardforks) {\n        if (hardfork === supportedHf) return true\n      }\n    } else {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Sets the active EIPs\n   * @param eips\n   */\n  setEIPs(eips: number[] = []) {\n    for (const eip of eips) {\n      if (!(eip in EIPs)) {\n        throw new Error(`${eip} not supported`)\n      }\n      const minHF = this.gteHardfork(EIPs[eip]['minimumHardfork'])\n      if (!minHF) {\n        throw new Error(\n          `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`\n        )\n      }\n      if (EIPs[eip].requiredEIPs) {\n        // eslint-disable-next-line prettier/prettier\n        (<number[]>EIPs[eip].requiredEIPs).forEach((elem: number) => {\n          if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n            throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`)\n          }\n        })\n      }\n    }\n    this._eips = eips\n  }\n\n  /**\n   * Returns a parameter for the current chain setup\n   *\n   * If the parameter is present in an EIP, the EIP always takes precendence.\n   * Otherwise the parameter if taken from the latest applied HF with\n   * a change on the respective parameter.\n   *\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @returns The value requested or `null` if not found\n   */\n  param(topic: string, name: string): any {\n    // TODO: consider the case that different active EIPs\n    // can change the same parameter\n    let value = null\n    for (const eip of this._eips) {\n      value = this.paramByEIP(topic, name, eip)\n      if (value !== null) {\n        return value\n      }\n    }\n    return this.paramByHardfork(topic, name, this._hardfork)\n  }\n\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name\n   * @returns The value requested or `null` if not found\n   */\n  paramByHardfork(topic: string, name: string, hardfork: string | Hardfork): any {\n    hardfork = this._chooseHardfork(hardfork)\n\n    let value = null\n    for (const hfChanges of HARDFORK_CHANGES) {\n      // EIP-referencing HF file (e.g. berlin.json)\n      if ('eips' in hfChanges[1]) {\n        const hfEIPs = hfChanges[1]['eips']\n        for (const eip of hfEIPs) {\n          const valueEIP = this.paramByEIP(topic, name, eip)\n          value = valueEIP !== null ? valueEIP : value\n        }\n        // Paramater-inlining HF file (e.g. istanbul.json)\n      } else {\n        if (!hfChanges[1][topic]) {\n          throw new Error(`Topic ${topic} not defined`)\n        }\n        if (hfChanges[1][topic][name] !== undefined) {\n          value = hfChanges[1][topic][name].v\n        }\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return value\n  }\n\n  /**\n   * Returns a parameter corresponding to an EIP\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param eip Number of the EIP\n   * @returns The value requested or `null` if not found\n   */\n  paramByEIP(topic: string, name: string, eip: number): any {\n    if (!(eip in EIPs)) {\n      throw new Error(`${eip} not supported`)\n    }\n\n    const eipParams = EIPs[eip]\n    if (!(topic in eipParams)) {\n      throw new Error(`Topic ${topic} not defined`)\n    }\n    if (eipParams[topic][name] === undefined) {\n      return null\n    }\n    const value = eipParams[topic][name].v\n    return value\n  }\n\n  /**\n   * Returns a parameter for the hardfork active on block number\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   */\n  paramByBlock(topic: string, name: string, blockNumber: BNLike): any {\n    const activeHfs = this.activeHardforks(blockNumber)\n    const hardfork = activeHfs[activeHfs.length - 1]['name']\n    return this.paramByHardfork(topic, name, hardfork)\n  }\n\n  /**\n   * Checks if an EIP is activated by either being included in the EIPs\n   * manually passed in with the {@link CommonOpts.eips} or in a\n   * hardfork currently being active\n   *\n   * Note: this method only works for EIPs being supported\n   * by the {@link CommonOpts.eips} constructor option\n   * @param eip\n   */\n  isActivatedEIP(eip: number): boolean {\n    if (this.eips().includes(eip)) {\n      return true\n    }\n    for (const hfChanges of HARDFORK_CHANGES) {\n      const hf = hfChanges[1]\n      if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n        if (hf['eips'].includes(eip)) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  hardforkIsActiveOnBlock(\n    hardfork: string | Hardfork | null,\n    blockNumber: BNLike,\n    opts: hardforkOptions = {}\n  ): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    const onlySupported = opts.onlySupported ?? false\n    hardfork = this._chooseHardfork(hardfork, onlySupported)\n    const hfBlock = this.hardforkBlockBN(hardfork)\n    if (hfBlock && blockNumber.gte(hfBlock)) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  activeOnBlock(blockNumber: BNLike, opts?: hardforkOptions): boolean {\n    return this.hardforkIsActiveOnBlock(null, blockNumber, opts)\n  }\n\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n  hardforkGteHardfork(\n    hardfork1: string | Hardfork | null,\n    hardfork2: string | Hardfork,\n    opts: hardforkOptions = {}\n  ): boolean {\n    const onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive\n    hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported)\n\n    let hardforks\n    if (onlyActive) {\n      hardforks = this.activeHardforks(null, opts)\n    } else {\n      hardforks = this.hardforks()\n    }\n\n    let posHf1 = -1,\n      posHf2 = -1\n    let index = 0\n    for (const hf of hardforks) {\n      if (hf['name'] === hardfork1) posHf1 = index\n      if (hf['name'] === hardfork2) posHf2 = index\n      index += 1\n    }\n    return posHf1 >= posHf2 && posHf2 !== -1\n  }\n\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @param opts Hardfork options\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n  gteHardfork(hardfork: string | Hardfork, opts?: hardforkOptions): boolean {\n    return this.hardforkGteHardfork(null, hardfork, opts)\n  }\n\n  /**\n   * Checks if given or set hardfork is active on the chain\n   * @param hardfork Hardfork name, optional if HF set\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if hardfork is active on the chain\n   */\n  hardforkIsActiveOnChain(\n    hardfork?: string | Hardfork | null,\n    opts: hardforkOptions = {}\n  ): boolean {\n    const onlySupported = opts.onlySupported ?? false\n    hardfork = this._chooseHardfork(hardfork, onlySupported)\n    for (const hf of this.hardforks()) {\n      if (hf['name'] === hardfork && hf['block'] !== null) return true\n    }\n    return false\n  }\n\n  /**\n   * Returns the active hardfork switches for the current chain\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Array with hardfork arrays\n   */\n  activeHardforks(blockNumber?: BNLike | null, opts: hardforkOptions = {}): HardforkParams[] {\n    const activeHardforks: HardforkParams[] = []\n    const hfs = this.hardforks()\n    for (const hf of hfs) {\n      if (hf['block'] === null) continue\n      if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break\n      if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue\n\n      activeHardforks.push(hf)\n    }\n    return activeHardforks\n  }\n\n  /**\n   * Returns the latest active hardfork name for chain or block or throws if unavailable\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Hardfork name\n   */\n  activeHardfork(blockNumber?: BNLike | null, opts: hardforkOptions = {}): string {\n    const activeHardforks = this.activeHardforks(blockNumber, opts)\n    if (activeHardforks.length > 0) {\n      return activeHardforks[activeHardforks.length - 1]['name']\n    } else {\n      throw new Error(`No (supported) active hardfork found`)\n    }\n  }\n\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   * @deprecated Please use {@link Common.hardforkBlockBN} for large number support\n   */\n  hardforkBlock(hardfork?: string | Hardfork): number | null {\n    const block = this.hardforkBlockBN(hardfork)\n    return block ? toType(block, TypeOutput.Number) : null\n  }\n\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   */\n  hardforkBlockBN(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const block = this._getHardfork(hardfork)['block']\n    if (block === undefined || block === null) {\n      return null\n    }\n    return new BN(block)\n  }\n\n  /**\n   * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Total difficulty or null if no set\n   */\n  hardforkTD(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const td = this._getHardfork(hardfork)['td']\n    if (td === undefined || td === null) {\n      return null\n    }\n    return new BN(td)\n  }\n\n  /**\n   * True if block number provided is the hardfork (given or set) change block\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n  isHardforkBlock(blockNumber: BNLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    hardfork = this._chooseHardfork(hardfork, false)\n    const block = this.hardforkBlockBN(hardfork)\n    return block ? block.eq(blockNumber) : false\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   * @deprecated Please use {@link Common.nextHardforkBlockBN} for large number support\n   */\n  nextHardforkBlock(hardfork?: string | Hardfork): number | null {\n    const block = this.nextHardforkBlockBN(hardfork)\n    return block === null ? null : toType(block, TypeOutput.Number)\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   */\n  nextHardforkBlockBN(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const hfBlock = this.hardforkBlockBN(hardfork)\n    if (hfBlock === null) {\n      return null\n    }\n    // Next fork block number or null if none available\n    // Logic: if accumulator is still null and on the first occurrence of\n    // a block greater than the current hfBlock set the accumulator,\n    // pass on the accumulator as the final result from this time on\n    const nextHfBlock = this.hardforks().reduce((acc: BN | null, hf: HardforkParams) => {\n      const block = new BN(hf.block!)\n      return block.gt(hfBlock) && acc === null ? block : acc\n    }, null)\n    return nextHfBlock\n  }\n\n  /**\n   * True if block number provided is the hardfork change block following the hardfork given or set\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n  isNextHardforkBlock(blockNumber: BNLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    hardfork = this._chooseHardfork(hardfork, false)\n    const nextHardforkBlock = this.nextHardforkBlockBN(hardfork)\n\n    return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber)\n  }\n\n  /**\n   * Internal helper function to calculate a fork hash\n   * @param hardfork Hardfork name\n   * @returns Fork hash as hex string\n   */\n  _calcForkHash(hardfork: string | Hardfork) {\n    const genesis = Buffer.from(this.genesis().hash.substr(2), 'hex')\n\n    let hfBuffer = Buffer.alloc(0)\n    let prevBlock = 0\n    for (const hf of this.hardforks()) {\n      const block = hf.block\n\n      // Skip for chainstart (0), not applied HFs (null) and\n      // when already applied on same block number HFs\n      if (block !== 0 && block !== null && block !== prevBlock) {\n        const hfBlockBuffer = Buffer.from(block.toString(16).padStart(16, '0'), 'hex')\n        hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer])\n      }\n\n      if (hf.name === hardfork) break\n      if (block !== null) {\n        prevBlock = block\n      }\n    }\n    const inputBuffer = Buffer.concat([genesis, hfBuffer])\n\n    // CRC32 delivers result as signed (negative) 32-bit integer,\n    // convert to hex string\n    const forkhash = intToBuffer(crc32Buffer(inputBuffer) >>> 0).toString('hex')\n    return `0x${forkhash}`\n  }\n\n  /**\n   * Returns an eth/64 compliant fork hash (EIP-2124)\n   * @param hardfork Hardfork name, optional if HF set\n   */\n  forkHash(hardfork?: string | Hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const data = this._getHardfork(hardfork)\n    if (data['block'] === null) {\n      const msg = 'No fork hash calculation possible for non-applied or future hardfork'\n      throw new Error(msg)\n    }\n    if (data['forkHash'] !== undefined) {\n      return data['forkHash']\n    }\n    return this._calcForkHash(hardfork)\n  }\n\n  /**\n   *\n   * @param forkHash Fork hash as a hex string\n   * @returns Array with hardfork data (name, block, forkHash)\n   */\n  hardforkForForkHash(forkHash: string): any | null {\n    const resArray = this.hardforks().filter((hf: any) => {\n      return hf.forkHash === forkHash\n    })\n    return resArray.length >= 1 ? resArray[resArray.length - 1] : null\n  }\n\n  /**\n   * Returns the Genesis parameters of the current chain\n   * @returns Genesis dictionary\n   */\n  genesis(): GenesisBlock {\n    return this._chainParams['genesis']\n  }\n\n  /**\n   * Returns the Genesis state of the current chain,\n   * both account addresses and values are provided\n   * as hex-prefixed strings\n   *\n   * @returns {Array} Genesis state\n   */\n  genesisState(): GenesisState {\n    // Use require statements here in favor of import statements\n    // to load json files on demand\n    // (high memory usage by large mainnet.json genesis state file)\n    switch (this.chainName()) {\n      case 'mainnet':\n        return require('./genesisStates/mainnet.json')\n      case 'ropsten':\n        return require('./genesisStates/ropsten.json')\n      case 'rinkeby':\n        return require('./genesisStates/rinkeby.json')\n      case 'kovan':\n        return require('./genesisStates/kovan.json')\n      case 'goerli':\n        return require('./genesisStates/goerli.json')\n    }\n\n    // Custom chains with genesis state provided\n    if (\n      this._customChains &&\n      this._customChains.length > 0 &&\n      Array.isArray(this._customChains[0])\n    ) {\n      for (const chainArrayWithGenesis of this._customChains) {\n        if ((chainArrayWithGenesis as [IChain, GenesisState])[0].name === this.chainName()) {\n          return (chainArrayWithGenesis as [IChain, GenesisState])[1]\n        }\n      }\n    }\n\n    return {}\n  }\n\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n  hardforks(): HardforkParams[] {\n    return this._chainParams['hardforks']\n  }\n\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n  bootstrapNodes(): BootstrapNode[] {\n    return this._chainParams['bootstrapNodes']\n  }\n\n  /**\n   * Returns DNS networks for the current chain\n   * @returns {String[]} Array of DNS ENR urls\n   */\n  dnsNetworks(): string[] {\n    return this._chainParams['dnsNetworks']!\n  }\n\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n  hardfork(): string | Hardfork {\n    return this._hardfork\n  }\n\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   * @deprecated Please use {@link Common.chainIdBN} for large number support\n   */\n  chainId(): number {\n    return toType(this.chainIdBN(), TypeOutput.Number)\n  }\n\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n  chainIdBN(): BN {\n    return new BN(this._chainParams['chainId'])\n  }\n\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n  chainName(): string {\n    return this._chainParams['name']\n  }\n\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   * @deprecated Please use {@link Common.networkIdBN} for large number support\n   */\n  networkId(): number {\n    return toType(this.networkIdBN(), TypeOutput.Number)\n  }\n\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n  networkIdBN(): BN {\n    return new BN(this._chainParams['networkId'])\n  }\n\n  /**\n   * Returns the active EIPs\n   * @returns List of EIPs\n   */\n  eips(): number[] {\n    return this._eips\n  }\n\n  /**\n   * Returns the consensus type of the network\n   * Possible values: \"pow\"|\"poa\"|\"pos\"\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusType(): string | ConsensusType {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['type']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    return this._chainParams['consensus']!['type']\n  }\n\n  /**\n   * Returns the concrete consensus implementation\n   * algorithm or protocol for the network\n   * e.g. \"ethash\" for \"pow\" consensus type,\n   * \"clique\" for \"poa\" consensus type or\n   * \"casper\" for \"pos\" consensus type.\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusAlgorithm(): string | ConsensusAlgorithm {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['algorithm']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    return this._chainParams['consensus']!['algorithm'] as ConsensusAlgorithm\n  }\n\n  /**\n   * Returns a dictionary with consensus configuration\n   * parameters based on the consensus algorithm\n   *\n   * Expected returns (parameters must be present in\n   * the respective chain json files):\n   *\n   * ethash: -\n   * clique: period, epoch\n   * aura: -\n   * casper: -\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusConfig(): { [key: string]: any } {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // The config parameter is named after the respective consensus algorithm\n        value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']]\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    const consensusAlgorithm = this.consensusAlgorithm()\n    return this._chainParams['consensus']![consensusAlgorithm as ConsensusAlgorithm]\n  }\n\n  /**\n   * Returns a deep copy of this {@link Common} instance.\n   */\n  copy(): Common {\n    return Object.assign(Object.create(Object.getPrototypeOf(this)), this)\n  }\n}\n"]}