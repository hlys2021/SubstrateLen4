{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../bak_node_modules/@ethereumjs/common/src/genesisStates/index.ts"],"names":[],"mappings":";;;AAEA,MAAM,aAAa,GAAsB;IACvC,KAAK,EAAE;QACL,GAAG,EAAE,SAAS;QACd,GAAG,EAAE,SAAS;QACd,GAAG,EAAE,SAAS;QACd,IAAI,EAAE,OAAO;QACb,GAAG,EAAE,QAAQ;KACd;IACD,OAAO,EAAE,OAAO,CAAC,gBAAgB,CAAC;IAClC,OAAO,EAAE,OAAO,CAAC,gBAAgB,CAAC;IAClC,OAAO,EAAE,OAAO,CAAC,gBAAgB,CAAC;IAClC,KAAK,EAAE,OAAO,CAAC,cAAc,CAAC;IAC9B,MAAM,EAAE,OAAO,CAAC,eAAe,CAAC;CACjC,CAAA;AAED;;;;;;GAMG;AACH,SAAgB,gBAAgB,CAAC,EAAU;IACzC,OAAO,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;AAClD,CAAC;AAFD,4CAEC;AAED;;;;;;GAMG;AACH,SAAgB,kBAAkB,CAAC,IAAY;IAC7C,OAAO,aAAa,CAAC,IAAI,CAAC,CAAA;AAC5B,CAAC;AAFD,gDAEC","sourcesContent":["import { genesisStatesType } from './../types'\n\nconst genesisStates: genesisStatesType = {\n  names: {\n    '1': 'mainnet',\n    '3': 'ropsten',\n    '4': 'rinkeby',\n    '42': 'kovan',\n    '5': 'goerli',\n  },\n  mainnet: require('./mainnet.json'),\n  ropsten: require('./ropsten.json'),\n  rinkeby: require('./rinkeby.json'),\n  kovan: require('./kovan.json'),\n  goerli: require('./goerli.json'),\n}\n\n/**\n * Returns the genesis state by network ID\n * @param id ID of the network (e.g. 1)\n * @returns Dictionary with genesis accounts\n *\n * @deprecated use {@link Common.genesisState} instead\n */\nexport function genesisStateById(id: number): any {\n  return genesisStates[genesisStates['names'][id]]\n}\n\n/**\n * Returns the genesis state by network name\n * @param name Name of the network (e.g. 'mainnet')\n * @returns Dictionary with genesis accounts\n *\n * @deprecated use {@link Common.genesisState} instead\n */\nexport function genesisStateByName(name: string): any {\n  return genesisStates[name]\n}\n"]}