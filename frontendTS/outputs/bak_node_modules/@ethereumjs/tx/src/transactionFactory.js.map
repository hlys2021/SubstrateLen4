{"version":3,"file":"transactionFactory.js","sourceRoot":"","sources":["../../../../../bak_node_modules/@ethereumjs/tx/src/transactionFactory.ts"],"names":[],"mappings":"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","sourcesContent":["import { BN, toBuffer } from 'ethereumjs-util'\nimport {\n  TxOptions,\n  TypedTransaction,\n  TxData,\n  AccessListEIP2930TxData,\n  FeeMarketEIP1559TxData,\n} from './types'\nimport { Transaction, AccessListEIP2930Transaction, FeeMarketEIP1559Transaction } from '.'\nimport Common from '@ethereumjs/common'\n\nexport default class TransactionFactory {\n  // It is not possible to instantiate a TransactionFactory object.\n  private constructor() {}\n\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n  public static fromTxData(\n    txData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData,\n    txOptions: TxOptions = {}\n  ): TypedTransaction {\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return Transaction.fromTxData(<TxData>txData, txOptions)\n    } else {\n      const txType = new BN(toBuffer(txData.type)).toNumber()\n      if (txType === 0) {\n        return Transaction.fromTxData(<TxData>txData, txOptions)\n      } else if (txType === 1) {\n        return AccessListEIP2930Transaction.fromTxData(<AccessListEIP2930TxData>txData, txOptions)\n      } else if (txType === 2) {\n        return FeeMarketEIP1559Transaction.fromTxData(<FeeMarketEIP1559TxData>txData, txOptions)\n      } else {\n        throw new Error(`Tx instantiation with type ${txType} not supported`)\n      }\n    }\n  }\n\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Buffer\n   * @param txOptions - The transaction options\n   */\n  public static fromSerializedData(data: Buffer, txOptions: TxOptions = {}): TypedTransaction {\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      let EIP: number\n      switch (data[0]) {\n        case 1:\n          EIP = 2930\n          break\n        case 2:\n          EIP = 1559\n          break\n        default:\n          throw new Error(`TypedTransaction with ID ${data[0]} unknown`)\n      }\n      if (EIP === 1559) {\n        return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions)\n      } else {\n        // EIP === 2930\n        return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions)\n      }\n    } else {\n      return Transaction.fromSerializedTx(data, txOptions)\n    }\n  }\n\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Buffer[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Buffer or Buffer[]\n   * @param txOptions - The transaction options\n   */\n  public static fromBlockBodyData(data: Buffer | Buffer[], txOptions: TxOptions = {}) {\n    if (Buffer.isBuffer(data)) {\n      return this.fromSerializedData(data, txOptions)\n    } else if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return Transaction.fromValuesArray(data, txOptions)\n    } else {\n      throw new Error('Cannot decode transaction: unknown type input')\n    }\n  }\n\n  /**\n   * This helper method allows one to retrieve the class which matches the transactionID\n   * If transactionID is undefined, returns the legacy transaction class.\n   * @deprecated - This method is deprecated and will be removed on the next major release\n   * @param transactionID\n   * @param _common - This option is not used\n   */\n  public static getTransactionClass(transactionID: number = 0, _common?: Common) {\n    const legacyTxn = transactionID == 0 || (transactionID >= 0x80 && transactionID <= 0xff)\n\n    if (legacyTxn) {\n      return Transaction\n    }\n\n    switch (transactionID) {\n      case 1:\n        return AccessListEIP2930Transaction\n      case 2:\n        return FeeMarketEIP1559Transaction\n      default:\n        throw new Error(`TypedTransaction with ID ${transactionID} unknown`)\n    }\n  }\n}\n"]}