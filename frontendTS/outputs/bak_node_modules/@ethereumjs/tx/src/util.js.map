{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../../bak_node_modules/@ethereumjs/tx/src/util.ts"],"names":[],"mappings":";;;AACA,qDAAsE;AACtE,mCAAoF;AAEpF,MAAa,WAAW;IACf,MAAM,CAAC,iBAAiB,CAAC,UAAyC;QACvE,IAAI,cAAc,CAAA;QAClB,IAAI,gBAAgB,CAAA;QACpB,IAAI,UAAU,IAAI,IAAA,oBAAY,EAAC,UAAU,CAAC,EAAE;YAC1C,cAAc,GAAG,UAAU,CAAA;YAC3B,MAAM,aAAa,GAAqB,EAAE,CAAA;YAE1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC1C,MAAM,IAAI,GAAmB,UAAU,CAAC,CAAC,CAAC,CAAA;gBAC1C,MAAM,aAAa,GAAG,IAAA,0BAAQ,EAAC,IAAI,CAAC,OAAO,CAAC,CAAA;gBAC5C,MAAM,YAAY,GAAa,EAAE,CAAA;gBACjC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBAC5D,YAAY,CAAC,IAAI,CAAC,IAAA,0BAAQ,EAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;iBACrD;gBACD,aAAa,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC,CAAA;aAClD;YACD,gBAAgB,GAAG,aAAa,CAAA;SACjC;aAAM;YACL,gBAAgB,GAAG,UAAU,aAAV,UAAU,cAAV,UAAU,GAAI,EAAE,CAAA;YACnC,iBAAiB;YACjB,MAAM,IAAI,GAAe,EAAE,CAAA;YAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAChD,MAAM,IAAI,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAA;gBAChC,MAAM,OAAO,GAAG,IAAA,6BAAW,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA;gBACpC,MAAM,WAAW,GAAa,EAAE,CAAA;gBAChC,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;oBAChD,WAAW,CAAC,IAAI,CAAC,IAAA,6BAAW,EAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;iBAC7C;gBACD,MAAM,QAAQ,GAAmB;oBAC/B,OAAO;oBACP,WAAW;iBACZ,CAAA;gBACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;aACpB;YACD,cAAc,GAAG,IAAI,CAAA;SACtB;QAED,OAAO;YACL,cAAc;YACd,UAAU,EAAE,gBAAgB;SAC7B,CAAA;IACH,CAAC;IAEM,MAAM,CAAC,gBAAgB,CAAC,UAA4B;QACzD,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;YAChD,MAAM,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;YACtC,MAAM,OAAO,GAAW,cAAc,CAAC,CAAC,CAAC,CAAA;YACzC,MAAM,YAAY,GAAa,cAAc,CAAC,CAAC,CAAC,CAAA;YAChD,IAAU,cAAe,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;gBAC1C,MAAM,IAAI,KAAK,CACb,sGAAsG,CACvG,CAAA;aACF;YACD,IAAI,OAAO,CAAC,MAAM,IAAI,EAAE,EAAE;gBACxB,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAA;aACnF;YACD,KAAK,IAAI,WAAW,GAAG,CAAC,EAAE,WAAW,GAAG,YAAY,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;gBAC1E,IAAI,YAAY,CAAC,WAAW,CAAC,CAAC,MAAM,IAAI,EAAE,EAAE;oBAC1C,MAAM,IAAI,KAAK,CAAC,sEAAsE,CAAC,CAAA;iBACxF;aACF;SACF;IACH,CAAC;IAEM,MAAM,CAAC,iBAAiB,CAAC,UAA4B;QAC1D,MAAM,cAAc,GAAG,EAAE,CAAA;QACzB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACtD,MAAM,IAAI,GAAQ,UAAU,CAAC,KAAK,CAAC,CAAA;YACnC,MAAM,QAAQ,GAAQ;gBACpB,OAAO,EAAE,IAAI,GAAG,IAAA,+BAAa,EAAS,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAClE,WAAW,EAAE,EAAE;aAChB,CAAA;YACD,MAAM,YAAY,GAAa,IAAI,CAAC,CAAC,CAAC,CAAA;YACtC,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,YAAY,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;gBACrD,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAA;gBACtC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,GAAG,IAAA,+BAAa,EAAC,WAAW,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAA;aACjF;YACD,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAC9B;QACD,OAAO,cAAc,CAAA;IACvB,CAAC;IAEM,MAAM,CAAC,iBAAiB,CAAC,UAA4B,EAAE,MAAc;QAC1E,MAAM,wBAAwB,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,0BAA0B,CAAC,CAAA;QACtF,MAAM,qBAAqB,GAAG,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,uBAAuB,CAAC,CAAA;QAEhF,IAAI,KAAK,GAAG,CAAC,CAAA;QACb,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACtD,MAAM,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,CAAA;YAC9B,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;YAC5B,KAAK,IAAI,YAAY,CAAC,MAAM,CAAA;SAC7B;QAED,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAA;QACnC,OAAO,SAAS,GAAG,qBAAqB,GAAG,KAAK,GAAG,wBAAwB,CAAA;IAC7E,CAAC;CACF;AAjGD,kCAiGC","sourcesContent":["import Common from '@ethereumjs/common'\nimport { bufferToHex, setLengthLeft, toBuffer } from 'ethereumjs-util'\nimport { AccessList, AccessListBuffer, AccessListItem, isAccessList } from './types'\n\nexport class AccessLists {\n  public static getAccessListData(accessList: AccessListBuffer | AccessList) {\n    let AccessListJSON\n    let bufferAccessList\n    if (accessList && isAccessList(accessList)) {\n      AccessListJSON = accessList\n      const newAccessList: AccessListBuffer = []\n\n      for (let i = 0; i < accessList.length; i++) {\n        const item: AccessListItem = accessList[i]\n        const addressBuffer = toBuffer(item.address)\n        const storageItems: Buffer[] = []\n        for (let index = 0; index < item.storageKeys.length; index++) {\n          storageItems.push(toBuffer(item.storageKeys[index]))\n        }\n        newAccessList.push([addressBuffer, storageItems])\n      }\n      bufferAccessList = newAccessList\n    } else {\n      bufferAccessList = accessList ?? []\n      // build the JSON\n      const json: AccessList = []\n      for (let i = 0; i < bufferAccessList.length; i++) {\n        const data = bufferAccessList[i]\n        const address = bufferToHex(data[0])\n        const storageKeys: string[] = []\n        for (let item = 0; item < data[1].length; item++) {\n          storageKeys.push(bufferToHex(data[1][item]))\n        }\n        const jsonItem: AccessListItem = {\n          address,\n          storageKeys,\n        }\n        json.push(jsonItem)\n      }\n      AccessListJSON = json\n    }\n\n    return {\n      AccessListJSON,\n      accessList: bufferAccessList,\n    }\n  }\n\n  public static verifyAccessList(accessList: AccessListBuffer) {\n    for (let key = 0; key < accessList.length; key++) {\n      const accessListItem = accessList[key]\n      const address = <Buffer>accessListItem[0]\n      const storageSlots = <Buffer[]>accessListItem[1]\n      if ((<any>accessListItem)[2] !== undefined) {\n        throw new Error(\n          'Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.'\n        )\n      }\n      if (address.length != 20) {\n        throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes')\n      }\n      for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n        if (storageSlots[storageSlot].length != 32) {\n          throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes')\n        }\n      }\n    }\n  }\n\n  public static getAccessListJSON(accessList: AccessListBuffer) {\n    const accessListJSON = []\n    for (let index = 0; index < accessList.length; index++) {\n      const item: any = accessList[index]\n      const JSONItem: any = {\n        address: '0x' + setLengthLeft(<Buffer>item[0], 20).toString('hex'),\n        storageKeys: [],\n      }\n      const storageSlots: Buffer[] = item[1]\n      for (let slot = 0; slot < storageSlots.length; slot++) {\n        const storageSlot = storageSlots[slot]\n        JSONItem.storageKeys.push('0x' + setLengthLeft(storageSlot, 32).toString('hex'))\n      }\n      accessListJSON.push(JSONItem)\n    }\n    return accessListJSON\n  }\n\n  public static getDataFeeEIP2930(accessList: AccessListBuffer, common: Common): number {\n    const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost')\n    const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost')\n\n    let slots = 0\n    for (let index = 0; index < accessList.length; index++) {\n      const item = accessList[index]\n      const storageSlots = item[1]\n      slots += storageSlots.length\n    }\n\n    const addresses = accessList.length\n    return addresses * accessListAddressCost + slots * accessListStorageKeyCost\n  }\n}\n"]}