{"version":3,"file":"eip1559Transaction.js","sourceRoot":"","sources":["../../../../../bak_node_modules/@ethereumjs/tx/src/eip1559Transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BN,\n  bnToHex,\n  bnToUnpaddedBuffer,\n  ecrecover,\n  keccak256,\n  rlp,\n  toBuffer,\n} from 'ethereumjs-util'\nimport Common from '@ethereumjs/common'\nimport { BaseTransaction } from './baseTransaction'\nimport {\n  AccessList,\n  AccessListBuffer,\n  FeeMarketEIP1559TxData,\n  FeeMarketEIP1559ValuesArray,\n  JsonTx,\n  N_DIV_2,\n  TxOptions,\n} from './types'\nimport { AccessLists } from './util'\n\nconst TRANSACTION_TYPE = 2\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex')\n\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nexport default class FeeMarketEIP1559Transaction extends BaseTransaction<FeeMarketEIP1559Transaction> {\n  public readonly chainId: BN\n  public readonly accessList: AccessListBuffer\n  public readonly AccessListJSON: AccessList\n  public readonly maxPriorityFeePerGas: BN\n  public readonly maxFeePerGas: BN\n\n  public readonly common: Common\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK = 'london'\n\n  /**\n   * EIP-2930 alias for `r`\n   *\n   * @deprecated use `r` instead\n   */\n  get senderR() {\n    return this.r\n  }\n\n  /**\n   * EIP-2930 alias for `s`\n   *\n   * @deprecated use `s` instead\n   */\n  get senderS() {\n    return this.s\n  }\n\n  /**\n   * EIP-2930 alias for `v`\n   *\n   * @deprecated use `v` instead\n   */\n  get yParity() {\n    return this.v\n  }\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n    return new FeeMarketEIP1559Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\n        `Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n          .slice(0, 1)\n          .toString('hex')}`\n      )\n    }\n\n    const values = rlp.decode(serialized.slice(1))\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array')\n    }\n\n    return FeeMarketEIP1559Transaction.fromValuesArray(values as any, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor\n   */\n  public static fromRlpSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n  public static fromValuesArray(values: FeeMarketEIP1559ValuesArray, opts: TxOptions = {}) {\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error(\n        'Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).'\n      )\n    }\n\n    const [\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList,\n      v,\n      r,\n      s,\n    ] = values\n\n    return new FeeMarketEIP1559Transaction(\n      {\n        chainId: new BN(chainId),\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gasLimit,\n        to,\n        value,\n        data,\n        accessList: accessList ?? [],\n        v: v !== undefined ? new BN(v) : undefined, // EIP2930 supports v's with value 0 (empty Buffer)\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE })\n    const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData\n\n    this.common = this._getCommon(opts.common, chainId)\n    this.chainId = this.common.chainIdBN()\n\n    if (!this.common.isActivatedEIP(1559)) {\n      throw new Error('EIP-1559 not enabled on Common')\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930])\n\n    // Populate the access list fields\n    const accessListData = AccessLists.getAccessListData(accessList ?? [])\n    this.accessList = accessListData.accessList\n    this.AccessListJSON = accessListData.AccessListJSON\n    // Verify the access list format.\n    AccessLists.verifyAccessList(this.accessList)\n\n    this.maxFeePerGas = new BN(toBuffer(maxFeePerGas === '' ? '0x' : maxFeePerGas))\n    this.maxPriorityFeePerGas = new BN(\n      toBuffer(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas)\n    )\n\n    this._validateCannotExceedMaxInteger(\n      {\n        maxFeePerGas: this.maxFeePerGas,\n        maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n      },\n      256\n    )\n\n    if (this.maxFeePerGas.lt(this.maxPriorityFeePerGas)) {\n      throw new Error(\n        'maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)'\n      )\n    }\n\n    if (this.v && !this.v.eqn(0) && !this.v.eqn(1)) {\n      throw new Error('The y-parity of the transaction should either be 0 or 1')\n    }\n\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      throw new Error(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n    }\n\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    const cost = super.getDataFee()\n    cost.iaddn(AccessLists.getDataFeeEIP2930(this.accessList, this.common))\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n  getUpfrontCost(baseFee: BN = new BN(0)): BN {\n    const inclusionFeePerGas = BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee))\n    const gasPrice = inclusionFeePerGas.add(baseFee)\n    return this.gasLimit.mul(gasPrice).add(this.value)\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n   */\n  raw(): FeeMarketEIP1559ValuesArray {\n    return [\n      bnToUnpaddedBuffer(this.chainId),\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.maxPriorityFeePerGas),\n      bnToUnpaddedBuffer(this.maxFeePerGas),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n      this.accessList,\n      this.v !== undefined ? bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize(): Buffer {\n    const base = this.raw()\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n  }\n\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true): Buffer {\n    const base = this.raw().slice(0, 9)\n    const message = Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n    if (hashMessage) {\n      return keccak256(message)\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  public hash(): Buffer {\n    if (!this.isSigned()) {\n      throw new Error('Cannot call hash method if transaction is not signed')\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(this.serialize())\n      }\n      return this.cache.hash\n    }\n\n    return keccak256(this.serialize())\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  public getMessageToVerifySignature(): Buffer {\n    return this.getMessageToSign()\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  public getSenderPublicKey(): Buffer {\n    if (!this.isSigned()) {\n      throw new Error('Cannot call this method if transaction is not signed')\n    }\n\n    const msgHash = this.getMessageToVerifySignature()\n\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      throw new Error(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n    }\n\n    const { v, r, s } = this\n    try {\n      return ecrecover(\n        msgHash,\n        v!.addn(27), // Recover the 27 which was stripped from ecsign\n        bnToUnpaddedBuffer(r!),\n        bnToUnpaddedBuffer(s!)\n      )\n    } catch (e: any) {\n      throw new Error('Invalid Signature')\n    }\n  }\n\n  _processSignature(v: number, r: Buffer, s: Buffer) {\n    const opts = {\n      common: this.common,\n    }\n\n    return FeeMarketEIP1559Transaction.fromTxData(\n      {\n        chainId: this.chainId,\n        nonce: this.nonce,\n        maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        maxFeePerGas: this.maxFeePerGas,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        accessList: this.accessList,\n        v: new BN(v - 27), // This looks extremely hacky: ethereumjs-util actually adds 27 to the value, the recovery bit is either 0 or 1.\n        r: new BN(r),\n        s: new BN(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON(): JsonTx {\n    const accessListJSON = AccessLists.getAccessListJSON(this.accessList)\n\n    return {\n      chainId: bnToHex(this.chainId),\n      nonce: bnToHex(this.nonce),\n      maxPriorityFeePerGas: bnToHex(this.maxPriorityFeePerGas),\n      maxFeePerGas: bnToHex(this.maxFeePerGas),\n      gasLimit: bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? bnToHex(this.s) : undefined,\n    }\n  }\n}\n"]}